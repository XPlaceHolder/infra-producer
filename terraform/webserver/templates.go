// Code generated by go-bindata.
// sources:
// templates/db_mysql.tf
// templates/jumpbox.tf
// templates/load_balancer.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/provider.tf
// templates/resource_group.tf
// templates/storage_account.tf
// templates/subnet.tf
// templates/vars.tf
// templates/vmss.tf
// templates/vnet.tf
// templates/web_server.tf
// DO NOT EDIT!

package webserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDb_mysqlTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcb\xae\x9b\x3c\x10\xde\xf3\x14\x23\xeb\x5f\xfd\x8b\xa8\xb7\xa8\xab\xec\x5a\x9d\xed\x79\x03\x6b\xc0\x13\x64\xc5\x8c\xe9\x8c\x4d\x95\x46\xbc\x7b\x85\x81\x90\xe4\xa0\xb2\xfc\xe6\xbb\x09\xcf\x0c\x28\x1e\xeb\x40\x60\x88\x5b\xcf\x64\x07\x12\xf5\x91\x0d\xdc\x2a\x00\x47\x67\xcc\x21\xc1\x09\xcc\xf1\xf0\xdd\x54\x63\x55\x6d\x82\x26\x0a\xa9\x81\xdb\x13\xa8\x29\x0a\xb6\xf4\x0a\xd7\xd8\x5c\x72\x6f\x85\x12\x71\xf2\x91\xad\xc3\xab\xbe\x66\x7c\x3d\x3e\x07\x38\x4c\x58\xa3\x92\xcd\x4a\xc2\xd8\x7d\x70\xbd\x13\x7a\x54\xfd\x1d\xc5\xcd\x04\x21\x8d\x59\x1a\x02\x83\x7f\xb2\x90\x74\xb6\xbb\xea\xaf\x60\x95\x64\x20\x31\x60\x5c\x3d\x23\x73\x81\xc9\x19\x76\xbf\x13\x98\xff\x6e\x03\xca\x81\x78\xb0\x13\x6d\x34\x15\xc0\x6a\x6f\x5b\x89\xb9\xb7\x0f\xf2\xc2\x5f\x33\x9f\x69\x87\x4b\xe6\x90\xf9\x15\xbd\x9b\x86\xd8\xe0\xf4\x63\xfe\x51\x62\xa5\x8c\xa6\xaa\x00\xf4\x92\x4b\xfb\xa5\xff\x09\xcc\xdb\xbb\x7d\x23\x3e\xda\x99\x5d\x5e\xa7\x58\x03\x34\xd8\x63\xe3\xd3\x75\xf3\x7a\x9c\x26\x4f\x52\xf4\xc4\x24\x18\xde\xb3\xf4\x51\x69\x9e\x9d\xb1\xf3\xe1\xba\x4c\x8f\x13\x36\x96\xf0\xf9\x95\x6d\x2f\xf1\xec\x03\x2d\x45\x56\xb4\xab\xb7\xa0\x05\x83\xff\xe1\xf3\xa7\x2f\xdf\x96\xc4\xdd\x6d\xd8\x34\xbb\xe3\x45\xda\x52\xb4\x42\x2e\xb3\x43\x4e\x76\x66\x4e\xca\x1f\x5e\xa7\x9d\x70\xf7\x8a\xe8\x3a\xcf\x5e\x93\x60\x8a\x62\x43\x6c\x3d\x6f\x09\x1f\x36\xab\xb8\xef\x48\xee\x9b\xb5\xa3\x5d\x47\x45\xbb\x9c\xcd\xe3\xca\x3c\x9e\x53\xe1\xa8\x06\x4b\x7c\x8e\xd2\x50\x47\x5c\xae\xea\x27\x2f\xad\xc7\xea\x6f\x00\x00\x00\xff\xff\x3a\xfa\xb7\xad\x8a\x03\x00\x00")

func templatesDb_mysqlTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesDb_mysqlTf,
		"templates/db_mysql.tf",
	)
}

func templatesDb_mysqlTf() (*asset, error) {
	bytes, err := templatesDb_mysqlTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db_mysql.tf", size: 906, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesjumpboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4b\x6f\xdb\x38\x10\xbe\xeb\x57\xcc\x6a\xf7\x1a\x63\x93\x0d\xf6\xe6\x53\x16\x0b\x14\x48\xd1\x22\xee\xe3\x50\x14\xc4\x58\x1c\xc9\x84\xa5\xa1\x30\x24\x95\x17\xfc\xdf\x0b\x8a\x92\x6a\xc7\x56\xd2\x07\xe2\x83\x21\x88\xdf\xbc\x3e\x7e\xdf\x48\xc8\xd9\x20\x05\x41\x8e\x0f\x41\x48\x1a\xd5\x86\x75\x6d\x0a\x65\xda\x1c\xf2\x6d\xe0\x3a\xb0\xd2\xd4\xad\xed\xdd\xfe\xc9\x63\x06\xc0\xd8\x10\xcc\xfd\x96\xf3\xc1\x19\x40\x6d\x0b\xf4\xc6\xf2\x5c\xe8\x5f\x8f\x63\x37\x63\x7f\xaa\x12\x1b\xda\xc5\x90\xf3\xc9\xdb\x31\xdd\x2e\xe6\x3e\x3c\x53\x87\x5d\xfe\x7c\xee\x18\xdf\xe7\x9d\x06\x50\xa8\xb5\x90\x73\x0a\xeb\x69\x8e\x25\xe4\xce\xa3\x37\x45\x9e\xed\xb2\xec\x98\x54\x26\x7f\x6b\x65\xab\x0c\x7b\x92\x12\x0b\x3a\x22\x97\x4d\x31\x4f\x6b\xdf\x76\x87\xb2\x20\xee\xfa\x89\x76\x67\x29\xec\x2c\x86\xcd\x10\xfa\x0a\x3c\xfe\x32\x7d\x19\x80\x69\x55\x61\xb9\x34\x55\x90\xd4\x6a\x1c\xf6\x05\x15\x3d\x3f\x78\xd2\x12\x80\x0b\x6b\x26\xaf\x8c\x7e\x59\x4e\x09\xba\x70\xc8\xe3\xa3\xd1\xbb\x94\xa5\x15\xd3\xa1\xa7\xf9\x0b\xd6\xf7\x8c\x4d\xa2\xfb\x94\x1a\xf6\xcb\x1f\xd4\x9c\xa0\x8b\x19\x47\x8c\x3d\xec\x4e\x6b\xa7\x33\xe2\x03\xd6\xaa\xc1\x62\x63\xf8\x48\x39\xcf\x99\xf1\x04\x7d\x29\x76\x60\x71\xde\x8b\xaf\x62\xc2\xdf\x70\xdf\x91\x81\x94\xd1\x0e\x96\xf0\x65\x2f\xe3\x11\x66\x71\x64\xb1\x9e\xea\xaf\x19\x40\xd7\x28\x67\x1e\x9e\x52\xb6\x84\x7c\xe5\x91\x35\x8a\x56\xff\xad\x2e\x54\x77\x91\x67\x51\xbb\x7f\xc2\x95\x6d\x1a\x62\x0f\x7e\x63\x1c\xd4\x86\x09\xbc\x85\x2d\x51\x0b\x7e\x43\xf0\x6e\x05\xda\xb8\x2d\x60\xe9\x49\x40\x53\x4d\xde\x70\xd5\x1f\x7d\x7a\x9b\x41\x7a\x43\xca\x3a\x15\x61\xca\xb2\xf2\x24\x8d\xe1\x51\x5b\x5e\x02\xfd\x48\x1d\x8d\x1e\xfb\x4a\xee\xa5\x52\x11\xd9\x17\x73\xf3\xd5\x9c\xb7\x82\x15\x29\xd3\xc4\x7f\xa1\x92\x84\xb8\xa0\xc1\x98\xbd\x3c\xdd\x86\x24\xb2\x72\x85\x6c\xd9\x14\x58\x27\xf5\xdb\xb2\x24\x19\x19\xfb\xb8\x0e\xec\xc3\x8a\xa4\x23\x19\x0c\xb9\x0d\xdf\x09\x3d\xff\x77\xf1\xf7\xe5\xd9\xf5\x87\x55\x3a\xeb\x48\x5c\x52\xdb\x12\xf2\x1a\x3d\x39\x9f\xb4\xbf\xd7\xd0\xc0\xd3\xec\x86\x98\x3e\x2e\xe9\x62\x23\x36\x25\x2f\x7a\x8b\x54\x87\xd0\x1b\x42\xfd\x59\x8c\xa7\x01\x23\x14\x6d\x6e\xdb\x49\xf4\x4b\xc8\xff\x17\xdb\xbc\x89\x34\x24\x4c\x83\x8c\x15\xe9\x74\x5b\xfe\xbe\xa5\x03\x65\x5c\xdf\xac\xa6\x96\xad\x53\xad\xd8\xd2\xd4\x23\x6d\x85\x6d\xda\xe0\x49\x06\xcd\xc7\xbd\x31\x59\x0d\x00\x75\x63\x58\x05\x47\x32\xee\xd3\x48\x40\xff\x76\x1f\xd0\xa2\x73\xb7\x56\x74\x04\xbc\x1f\x9e\xcf\x2f\xfe\xb9\xfc\xe3\x44\x5d\x55\x1b\x0e\x77\xc3\x6e\x1d\x9a\xd0\xc6\xe1\xba\xa6\x29\x8f\xc2\xe0\x37\xc4\xde\x4c\xdb\xac\xc4\xda\xd1\x98\xcc\x63\xe5\x86\x48\xe2\xce\x88\xe5\x5e\x83\xe9\xa3\x56\x19\xae\xc6\xed\xf4\x2d\x00\x00\xff\xff\xc9\x3d\x5e\xfc\x2e\x08\x00\x00")

func templatesjumpboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesjumpboxTf,
		"templates/jumpbox.tf",
	)
}

func templatesjumpboxTf() (*asset, error) {
	bytes, err := templatesjumpboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox.tf", size: 2094, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoad_balancerTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x3f\x8f\xd4\x30\x10\xc5\xfb\x7c\x0a\xcb\xa2\xcd\x42\x49\xb3\x05\x27\x21\x81\x44\xb1\x42\xf4\x96\x63\xfb\xf6\x4c\x7c\x1e\xe3\x3f\x5b\xb0\xca\x77\x47\x76\xe2\xbd\x4b\xe2\x39\x09\x0e\x0a\xb6\xdc\x79\x79\x9e\xf9\x3d\x7b\xbc\x0a\x90\xbc\x50\x84\xf2\x9f\xc9\x2b\xff\xc8\x5c\x1a\x8c\x16\x4c\x3b\x4a\xe8\x98\xac\x49\x96\x19\xe0\x92\x0d\xdc\x70\x2b\x94\x2f\x95\x6b\x47\x88\xe5\x8f\x8a\x60\xbf\x23\xa1\x6f\xae\x17\xee\x0f\xca\x5e\x58\x56\x4e\x7d\x76\xe9\xab\x4b\xaf\x1d\xed\x08\x31\x20\x78\xd4\x60\x71\x8f\xda\x56\x6d\x94\x9d\x3d\x24\x77\x58\x3a\xdb\xfc\x5b\xed\xa6\xec\xbd\xae\xb1\x75\xbb\xbf\xef\x5d\x86\xc8\xbe\x37\x40\x8c\x4b\xe9\x55\x08\x8c\x9b\xdb\x1c\x47\x42\x43\xe4\x51\x8b\xac\x0c\x63\x42\x01\x3d\x11\x5a\xd3\x0d\x63\x9a\x68\x37\x75\xdd\x3e\x19\x33\x20\x91\xe0\x79\xb4\x62\x18\x30\xf0\xff\x80\xf7\x2b\x30\xb7\xe0\xbd\xc8\x8c\x90\x7b\x0f\x36\x2a\x2b\x73\x36\x02\xec\xbd\x3e\x27\x3f\x4f\x99\xf9\x20\x37\xf6\x48\xe8\xa9\x24\xfa\xf9\xf4\x61\xce\x93\x16\xf1\x3e\x66\x2d\xd7\xf3\xdc\x14\x07\xe4\x9d\x1c\xb4\x2c\x7d\x4d\x58\x9e\x6c\xe0\x62\xcc\x0d\xd7\x23\x1c\x80\xc1\xde\x5d\x5b\x7b\xfd\xfb\xe4\xf3\xb1\x4f\x53\xc8\xfd\xdd\x30\x43\x73\xe2\x3a\x2e\x72\x11\xef\xb8\x18\x3f\x5a\xb9\x40\x3e\xe5\xee\x51\x2e\xce\xc3\xa0\x30\x10\x4b\xf1\xff\x99\xfc\x21\x46\xd7\x07\xe5\x2f\xda\x9e\xfb\xb9\xfb\xbc\x47\x3c\x44\x10\x60\x36\xe2\x4f\x31\xba\xf9\x39\xfd\x48\x2a\x44\xe6\x78\x7c\x78\x56\x7e\x5b\x3e\x05\x1f\xf7\xe7\xbc\x7f\x87\xf2\xf4\xc9\x64\x9c\xdf\xc1\x4a\x48\x1b\x9c\x73\x0d\xa3\xf9\xaa\xfd\xf0\x22\x58\xcc\xf9\x0f\x18\xaf\xad\xbe\xdc\x7d\xcd\x23\x21\x88\xd7\xda\x6f\xc2\xad\x36\x47\x8b\xec\xc2\x96\x90\xfa\x02\xdb\xa2\xaa\x42\xb7\xd0\xed\x7a\x36\xf6\x4d\xeb\x71\x3f\x03\xb5\x01\xd4\xdc\x05\xed\x2d\xd4\x54\x2e\x28\xcb\x55\x6c\xc4\x81\x1c\x5a\xe4\xed\x53\xe6\x52\xb1\x9d\x7e\x05\x00\x00\xff\xff\x55\x3f\x0e\x54\x53\x08\x00\x00")

func templatesLoad_balancerTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoad_balancerTf,
		"templates/load_balancer.tf",
	)
}

func templatesLoad_balancerTf() (*asset, error) {
	bytes, err := templatesLoad_balancerTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/load_balancer.tf", size: 2131, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x93\x31\x6f\xf2\x30\x10\x86\x77\xff\x8a\x93\xf5\x4d\x9f\x04\x02\xa6\x2e\x0c\xdd\xda\xb9\xdd\x2d\xd7\xb9\x12\x0b\xe3\x8b\xce\x36\xb4\x45\xf9\xef\x95\x43\xa2\x42\x08\x11\x45\x5d\x2a\x35\x63\xfc\xe8\xbd\xcb\xeb\x27\x8c\x81\x12\x1b\x04\xa9\x3f\x12\x23\x6f\x94\xc7\xb8\x23\x5e\xab\x80\x26\xb1\x8d\xef\x6a\xc5\x94\x2a\x09\x72\x9d\xbc\x4b\xfe\xe2\xf9\x5e\x00\x78\xbd\x41\xe8\x3d\x4b\x90\xff\xf6\x5b\xcd\x53\xf4\x5b\x95\x81\x7a\xe2\xc3\x4a\x0a\x00\x47\x46\x47\x4b\xfe\x8c\xee\x56\xe9\x96\x3b\x8c\x98\xb6\x0b\xf4\xde\x76\x29\x75\x8e\x3c\x3d\x6b\xc6\xdd\x10\xd9\x6c\x29\x45\x2d\xc4\x15\xf5\x70\x72\x38\xd2\x4e\x3e\x56\x65\x8c\x23\x0d\x1d\x7d\xfb\xbd\x73\xb4\x9b\x3c\x64\x5c\x00\x54\x6c\x29\x87\x0c\xc3\xf3\xd9\x4c\x00\x14\x96\xd1\xf4\x5b\xfc\x0a\x7c\xf4\x2f\x94\x7c\x91\xd3\xb4\x31\x18\xc2\xf8\xe8\xc3\x54\x8a\x64\xc8\x5d\xe0\x9e\x4d\xb3\x5b\x5b\x58\x45\x1c\x15\x6b\xbf\xc2\x53\xea\x7f\x66\x0a\x0c\xd1\xfa\xe6\x76\xce\xc0\x25\xc8\xbb\xd9\x51\x90\x2e\x0a\xc6\x10\x54\xc5\xf8\x6a\xdf\x46\x82\xfa\x60\xc7\x0c\x5d\xfd\xed\x56\xb5\x0a\x00\x0c\xeb\x3e\x60\xd6\x30\x38\x1d\xfd\x6b\x7e\xde\xb4\x10\xca\x6f\x88\xf6\x14\xca\x6b\x3c\x9b\xff\x6e\xcf\x16\x8b\x3f\xcf\x5a\xcf\x3e\x03\x00\x00\xff\xff\xbc\xdd\x41\xa1\xef\x05\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 1519, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\x41\x0a\xc2\x40\x0c\x85\xe1\xfd\x9c\x22\x0c\xae\x7b\x03\xcf\x12\x82\x04\x29\x9d\x49\x4a\x4c\x22\x58\x7a\x77\x51\xa8\xd8\x0a\x6e\x1f\x7f\xbe\x68\xf8\x1c\x0e\x95\x25\x47\x53\xe9\x2c\x5e\x61\x29\x00\x49\x2d\x18\xce\x50\x4f\x4b\x92\x0d\xf4\x08\x63\xfc\xaa\xd6\x5a\xd6\x52\xb6\x73\xe3\x9b\x86\x5d\x18\xaf\xa6\x31\xa3\x50\xe7\x1f\xe6\x4d\x58\xc7\x7d\x3b\x4c\x21\x2d\xe4\xb8\xbe\x84\xfd\x8b\x14\xf6\xff\x70\x8e\xe6\x41\x0d\x85\xfd\xae\x36\x6d\xf2\x71\xfe\xd0\xcf\x00\x00\x00\xff\xff\xb3\xf3\x67\xee\xfc\x00\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 252, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xc1\x0a\xc3\x20\x0c\x40\xef\x7e\x45\x90\x1d\x36\x18\xfb\x83\x7d\x4b\x71\x36\x87\xb0\x36\x4a\x8c\x1e\x56\xfc\xf7\x51\x0b\xb5\x14\x36\x8f\xbe\xf7\x92\x44\x09\x85\x46\x14\xb0\xee\x93\x05\x65\xb6\xb0\x18\x00\x3f\x11\xb2\x0e\x34\xc2\xf6\x9e\x60\x2f\x4b\x71\xf2\x68\xd6\xb0\xe3\x6a\xbb\x9c\xd0\x0b\xea\x4f\x79\xc3\x2d\x48\xf9\x95\xbc\x50\x54\x0a\xbc\xee\x38\x05\x27\xdc\x12\x45\x76\x7f\x0e\xda\x71\x93\x91\x0b\x49\xe0\x19\x59\xbb\x3c\x85\xf0\xce\xf1\xba\x36\x07\x9e\xee\xd0\xa7\x1c\xfe\x6f\xd5\x9a\x6a\xbe\x01\x00\x00\xff\xff\xcd\xed\xb3\xce\x1e\x01\x00\x00")

func templatesProviderTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderTf,
		"templates/provider.tf",
	)
}

func templatesProviderTf() (*asset, error) {
	bytes, err := templatesProviderTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider.tf", size: 286, mode: os.FileMode(480), modTime: time.Unix(1541042574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4a\x2d\xce\x2f\x2d\x4a\x4e\x55\x50\x4a\xac\x2a\x2d\x4a\x2d\xca\x8d\x87\x89\xc4\xa7\x17\xe5\x97\x16\x28\x29\x28\x65\x97\xe6\xe5\x94\xe6\x61\x88\x57\x73\x29\x28\xe4\x25\xe6\xa6\x2a\x80\x80\xad\x82\x92\x4a\x75\x59\x62\x91\x5e\x6a\x5e\x59\x3c\x48\xb4\x56\x17\xa2\x4d\x89\x4b\x41\x21\x27\x3f\x39\xb1\x24\x33\x3f\x0f\xa1\x0a\x26\x52\xab\xc4\x55\xcb\x05\x08\x00\x00\xff\xff\x26\x45\x5a\x39\x83\x00\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 131, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorage_accountTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\x41\x6e\xeb\x20\x10\x06\xe0\xbd\x4f\x31\x42\x6f\xf1\x2a\xa5\xb9\x41\x6e\xd0\x55\x73\x80\xd1\x18\x8f\x53\x14\x32\xa0\xf1\x10\xc9\x8d\x72\xf7\x0a\xa7\xa8\x6e\x93\xaa\x2c\xe1\xe3\xe7\x1f\x94\xa7\x54\xd4\x33\x38\x7a\x2f\xca\x7a\xc2\xc9\x92\xd2\x81\x91\xbc\x4f\x45\xcc\x81\x1b\x78\xa4\x12\xed\xfe\xe4\xd2\x01\x08\x9d\x18\x1e\xae\x1d\xb8\x7f\x17\xe5\x1c\xc9\xf3\xff\x33\xe9\x96\xe5\x8c\x95\x6f\xc0\x3d\xbb\x0d\x38\xf7\x74\x75\x1d\x40\xab\x80\x07\x4d\x25\xe3\x2a\x70\x49\x68\xbd\xbe\xb3\xed\xb1\x48\x2c\xf2\x73\xb7\x5e\x5e\x42\x63\xf2\x64\x21\xc9\x2f\xb5\x6a\x9d\x46\x16\xff\x39\x13\x1e\x83\x0c\x77\x7e\x7f\x1b\x7c\xed\x2c\xb0\x3e\x70\x24\x03\xe9\xb0\x86\xf5\x03\xc2\xed\x21\xb4\x39\xf3\x02\x5f\x5e\xf7\xd5\xb0\x50\x1f\x19\xfb\x98\x7a\x64\xf1\x3a\xe7\x56\x79\x07\xa6\x85\xbf\xc8\x18\x22\xff\x41\xde\xcc\xf2\x84\xa6\x34\x8e\xc1\x63\x92\x38\x37\x72\xed\x3e\x02\x00\x00\xff\xff\x4b\xba\x5c\x88\xe6\x01\x00\x00")

func templatesStorage_accountTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorage_accountTf,
		"templates/storage_account.tf",
	)
}

func templatesStorage_accountTf() (*asset, error) {
	bytes, err := templatesStorage_accountTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage_account.tf", size: 486, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSubnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xcf\x6a\xc3\x30\x0c\xc6\xef\x7e\x0a\x61\x7a\xd8\xa0\x0b\x3d\xee\xd2\x27\x19\xc3\x78\xb6\x56\x44\x5b\x3b\x48\xf6\xfe\x85\xbc\xfb\xc8\x1f\x27\x24\x24\x87\xe6\x16\xe9\xd3\x4f\xd6\xf7\x31\x4a\xcc\xec\x10\xb4\xfd\xcb\x8c\x7c\x37\x92\x3f\x02\x26\x0d\x5a\x6c\x98\x7e\x1a\x05\x10\xec\x1d\x61\xfd\x9d\x7b\xdd\xcb\xa8\x53\x00\x05\x68\x2e\x1c\x73\x6d\x86\xa1\x33\xe8\x43\x53\x16\x2c\x15\xd5\x35\x87\x5b\x0e\xeb\x6a\x37\xd7\x76\xbc\x2f\xe2\x94\xed\xcd\x04\x4c\xdf\x91\xaf\x03\x70\xc1\x5b\x29\x0a\x70\x5d\x9e\x88\xd6\x7b\x46\x11\x53\x33\x7e\xd2\xcf\x7c\xc7\xa1\x71\xe4\x79\xb8\xe4\xe9\x41\x78\x61\x4a\x6d\x1d\xbe\x9d\xde\x8f\xf0\x7a\x84\xd3\x73\xab\x55\xab\xd4\x9e\xc7\xd3\x4d\x82\x2e\x33\xa5\xdf\xd1\x33\x2b\x12\x1d\xd9\x44\x31\x68\xd0\xe3\xc6\x20\x97\x65\xa3\x8b\x64\xe4\x90\xdf\xca\x65\x76\x68\x90\x55\x73\xa0\x15\xf9\xde\x8a\x9d\x07\x90\x5f\xce\x6f\xcb\x8a\x17\x3b\xdd\x7e\x45\xab\xfe\x03\x00\x00\xff\xff\x4d\x40\x43\x0b\x61\x02\x00\x00")

func templatesSubnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSubnetTf,
		"templates/subnet.tf",
	)
}

func templatesSubnetTf() (*asset, error) {
	bytes, err := templatesSubnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/subnet.tf", size: 609, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6e\xe3\x30\x0c\x45\xf7\x3e\x05\xa1\x03\xcc\x4c\x32\xc0\xec\xbc\x18\xa4\x40\x0e\x10\x74\x55\x14\x02\x2d\xb1\xa9\x10\x99\x32\x48\xc9\x41\x13\xe4\xee\x85\x9d\xb4\xb1\x93\xb6\xf6\x8a\xfa\x0f\x9f\xfa\x5f\x3d\x4a\xc0\x26\x12\x18\xe2\xde\x32\xb6\x64\xe0\x78\xaa\xaa\xd9\x79\x90\xc4\x2d\x71\x56\x03\xc7\x0a\x20\xbf\x75\x04\x35\x98\x16\x3b\x53\x01\x78\x7a\xc1\x12\x33\xd4\xa3\x08\xf0\xff\x50\x84\x56\x31\x15\x0f\x97\xaf\x06\xd3\x95\x26\x06\x67\xae\xc0\xe3\x66\x9d\x7a\x92\xd1\x77\x00\x8a\x6e\x3f\xe7\x09\xb6\x26\x69\x91\x2f\x6e\x35\x98\xed\x38\x4f\x80\xd5\x6b\x60\xfc\xd8\x56\x83\x71\xc3\x3c\xe8\xa7\xea\x34\x49\x81\x03\x6b\x27\x59\x6e\x63\x9e\x81\x4c\x8c\x9c\x6d\xf0\x5f\xcb\x5a\x1a\x75\x12\xba\x1c\x12\x7f\x0b\xb9\x18\xe8\x07\x8f\x8b\xac\xe4\x84\xee\x6e\x11\x93\xc3\xc1\xfc\x5c\xf4\xb5\x59\x43\xa8\xb9\xe8\xd2\x54\x33\x7c\x57\x38\x16\xb6\x7d\x90\x5c\x30\x5a\xa6\xbc\x4f\xb2\xb3\xe8\xbd\x90\xaa\xd5\x0e\x1d\x4d\xde\xec\xdc\x50\x0c\x9a\xe7\xef\xf6\x64\x16\x7f\x7e\x8d\xff\xef\xc5\x3f\xf3\x3c\xdf\xb1\xa7\xc6\x2a\x49\x4f\x62\xfb\xd6\xba\x54\xee\xbb\x9b\x23\x1a\x0e\x74\x77\xff\x4d\x46\xf6\x28\xde\x3e\x2c\xd5\xf6\x7f\x6f\x72\xc4\x84\xde\x36\x18\x91\x1d\x89\xd5\x5d\x19\x37\xbc\x07\x00\x00\xff\xff\xa9\xf4\x23\x83\x9c\x02\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 668, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVmssTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xc1\x8a\xe4\x36\x10\xbd\xfb\x2b\x84\xc9\x75\x1a\xf7\x64\x37\x90\x83\x0f\x21\x24\xb0\xb0\x81\x61\x67\x43\x0e\x21\x88\xb2\x54\xee\x11\x2d\x4b\xa2\x24\x79\xb6\x77\xe9\x7f\x0f\x92\xad\x69\xb7\xdb\xc3\x1c\xc6\xa7\x6e\xd5\xd3\xab\x27\xbd\x72\x95\x09\xbd\x8d\x24\x90\xd5\xf0\x3d\x12\xd2\xc0\x75\xc7\x0d\x04\xee\xac\xd5\x35\xab\x8f\xd1\xe8\x68\xf8\x38\x78\xbf\x58\xfe\x51\x31\x56\x76\xf2\x03\xd9\xe8\xb8\x81\x01\xd9\xe2\x69\x59\xfd\xd3\x8f\xc2\x79\x8d\xdd\xcd\xa4\xab\xd5\xc4\x70\xae\x2b\xc6\xd6\x54\xab\xa7\x2d\xaa\xee\xbc\x7f\x4a\x78\x6d\x41\x76\xa0\xc1\x08\x24\xae\xe4\x06\xfe\xa2\x44\x77\x25\x7b\xda\xc5\xcb\xb6\x9d\x92\x39\xb5\x23\x1b\xac\xb0\xfa\xf5\xd4\x5f\x85\x4b\xc0\x9e\xac\x09\x68\x24\x77\x96\x02\xf7\x01\x28\x5c\x03\x3f\x36\x4d\xd3\xdc\x00\xd1\xc8\x35\xe3\xc7\x66\xbf\xff\xb5\x62\xac\x03\x71\x2c\xb8\xcd\xd4\xf7\xf7\x4b\x3a\xe5\xb8\xb0\xa6\x57\x87\x48\x10\x94\x35\x93\x01\x2d\xab\x1f\x62\xa7\x95\xf8\xf4\xf0\x9b\x94\x84\xde\xd7\xd5\xb9\xaa\x6e\x5d\x1e\x15\x85\x08\x9a\x0f\x20\x9e\x94\x41\xee\x05\x68\xe4\x1e\xc3\xb5\xe7\x93\xd5\x5b\x86\xb4\xac\x1e\x4e\x01\x7d\xc8\x3b\x3d\x86\xbb\xfd\xe4\x85\xc8\x72\xde\x57\x0a\x85\x25\x7b\xb2\x55\x68\xef\xa8\xae\xe8\x0e\x04\x12\xb9\xb3\x5a\x89\x13\x1f\xac\xcc\x74\x7f\x81\x89\xa0\xeb\xaa\x62\xcc\x1f\x63\x3e\xf6\xe2\xe0\x39\xdf\x08\xb4\x7b\xc6\x8e\x7b\xa4\x11\x89\x8f\x03\xf7\xea\xfb\x44\xca\x58\x50\x48\x05\xfa\x18\xc0\x48\x20\x39\x45\x04\x38\x10\x2a\x9c\x5e\x23\x11\x36\x9a\x90\x59\xce\x39\x7b\xb0\x04\x07\xe4\x8e\x6c\xaf\x34\x72\x35\xa4\x7f\x84\x3d\x12\x1a\x81\xb3\x32\x97\x5c\xf6\x4f\x48\x89\xf5\x77\x30\xd6\x28\x91\xe4\xa7\x98\xed\xfb\x8b\x96\xbf\xbb\x68\x42\x7c\xcc\xd9\xa6\x70\x3a\xde\x8b\x31\xfb\x5f\x76\xcd\x87\xbb\xcf\x5f\x1f\xa7\xd8\x88\xe4\x27\xf7\x5a\x56\x6b\x48\xfe\xbe\x2a\xcc\x7a\x2e\x95\x3f\xae\xaf\x6a\x69\x7b\xb9\x80\x54\x63\x87\xeb\xd0\x17\x04\xf9\x0f\xa9\x80\x33\x86\x10\x02\x72\xeb\x5e\x8a\xa7\x65\xf5\x9f\x64\x87\x4f\xe9\xf8\x13\x66\x00\x03\x07\x94\x39\x2b\x0f\x27\x87\xcb\xbb\xe6\x9f\xbf\x3c\xbe\x2a\x55\x42\x80\xa5\x58\x1d\x57\x05\xda\x6c\x09\x7d\x53\x65\xcb\xea\x3f\x06\x17\x4e\x53\x30\xcb\x4a\x15\xc1\x0f\x5d\xde\xbd\x6f\x8a\x1e\xeb\x8b\x94\x59\x80\xb0\x83\x8b\x01\x29\x57\x33\x77\x84\xbd\xfa\x76\xa9\x0f\x34\x63\x0e\x9c\xef\xc6\x61\xe2\x06\x39\x28\xc3\xa3\x47\x5a\xdc\x73\x7e\x05\x73\x64\x09\x72\xe0\xfd\xb3\x25\x79\x01\x3d\xa4\x95\xb4\xb4\xbf\xff\xf9\x43\x7d\xab\x89\x6b\x65\xe2\xb7\xb9\x9d\xcc\x02\xa5\xf2\xd0\x69\x7c\x61\xe3\x10\xc3\x13\x9a\xa0\xe6\xd7\xbb\x65\x3d\x68\x8f\x85\xcc\x60\x78\xb6\x74\x5c\x9d\xb2\x68\x7d\xe9\xd8\xa9\xa5\xcc\xd0\x19\x39\x29\x77\xa4\x06\xa0\xf4\x86\x04\x8a\x58\xe5\xb5\x75\x83\x9b\x39\xdf\x1c\x0f\x0b\xf7\x6e\x92\x2a\x77\x45\x59\xcf\x8c\x25\xfd\x9b\x8c\x59\xdd\xf4\xc7\xc7\xce\x60\xd8\x18\x37\x37\x2a\x2e\x8d\x6a\xda\xb3\xf3\x60\xca\xcf\x79\xec\xa4\xe7\x6a\x1e\xf1\x32\x0d\x60\xea\xe2\x79\xee\x72\x25\x3d\x6b\xd9\xbf\x57\xe3\x6c\x13\xb9\x39\xe3\xb6\x91\x49\xc1\x7f\x9b\x12\x94\xe9\x6c\x34\x32\x8f\x7d\x8a\x1a\x7d\xce\x9f\xcf\xb4\x92\x50\x3e\x0c\x76\x5b\x5f\x0b\x8b\x0c\xe7\x5c\x2e\xe7\xff\x03\x00\x00\xff\xff\x3d\xb0\x63\x9f\x74\x08\x00\x00")

func templatesVmssTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVmssTf,
		"templates/vmss.tf",
	)
}

func templatesVmssTf() (*asset, error) {
	bytes, err := templatesVmssTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vmss.tf", size: 2164, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x41\xaa\xc3\x30\x0c\x44\xf7\x3e\x85\x10\x59\xe7\xff\x6c\xba\xcb\x49\x4a\x31\x22\x11\x25\x24\xb1\x83\x6c\xa5\x50\xe3\xbb\x97\x84\xba\x50\x57\xda\x69\x66\xf4\x46\x38\x78\x95\x81\x01\xe9\xa9\xc2\xb2\xda\x7d\x92\xa8\xb4\x58\xc7\xf1\xe1\x65\x46\xc0\x59\xdd\xa2\xee\x57\x48\x06\xc0\xd1\xca\x50\x4d\x5f\x22\x68\x00\x0a\xc0\xde\xc5\xeb\x66\x4f\x7f\x0f\xd8\xa4\xc2\xfb\x36\xb4\x6f\x58\x75\x3d\x62\xf9\x78\x47\xe3\x28\x1c\x82\x0d\x1b\x0d\xfc\xe1\x5d\xb1\xfb\x6f\xcf\xfd\xeb\x2e\x78\x33\x00\x8b\x1f\x28\x4e\xde\x55\xbd\x9a\xb4\x93\xb4\x45\xcc\x68\xb2\x79\x05\x00\x00\xff\xff\xdc\x95\x4b\x68\x02\x01\x00\x00")

func templatesVnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVnetTf,
		"templates/vnet.tf",
	)
}

func templatesVnetTf() (*asset, error) {
	bytes, err := templatesVnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vnet.tf", size: 258, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesWeb_serverTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\x4c\xd5\x9c\x0a\xac\xd1\xb4\x41\x6f\x3e\x05\x28\x50\x20\x45\x8b\xb8\x1f\x87\x20\x20\xc6\xe2\x58\x1e\x98\x1c\x0a\x43\x52\x9b\x64\xe1\xff\x5e\x88\x92\x1c\x7b\x2d\x77\xb7\x0b\xd4\x07\x43\x12\xdf\x7c\xf0\x71\xde\x63\xa5\x14\x43\xd6\x86\xa0\xc6\x2f\x59\x49\xbd\x11\x4a\xf7\x41\x0f\x86\x25\x91\xee\xb0\xa1\x1a\xea\x43\x16\x97\xc5\x08\x37\x35\x3c\x54\x00\x82\x9e\xe0\xd1\x6f\x0d\xf5\xab\x87\x1e\x75\x45\xd2\x9b\x01\x70\xbc\x13\x6e\xee\x5e\x3d\x34\x21\x4b\x5a\xb1\x58\xfa\x74\xac\x2b\x80\xf2\x7e\x2b\xf8\x9e\xb6\x26\x92\xf6\xa4\xa6\xf7\xa6\x40\x4b\x90\x0b\x0d\x26\x0e\x72\x15\x34\xb7\x3d\x6f\xc4\xb4\x1a\x72\xb7\x9a\x3a\x7e\xf4\x75\xce\x52\x52\x5e\xae\x95\x96\x5f\x90\xb2\xec\xb4\xae\x2a\x00\xee\x4c\x13\x64\xc7\x6d\xd6\xb1\xd5\x81\xa9\x65\xae\x9e\x62\x8d\xbb\x05\xde\x00\x62\xde\x0a\x25\xc3\xf6\x76\xaa\xb9\xf7\x11\xba\x8a\x28\xf3\x23\xdb\x29\x4b\xa7\xdc\x63\x22\xc3\x9d\x41\x6b\x95\x62\x34\xe8\x4e\xfc\xae\xa1\xb6\x9f\x05\x3d\x37\x03\xfa\x58\x1d\xab\x85\x19\xe9\x59\x53\x46\x67\x3c\x36\x7b\x96\xb3\x09\xe9\xfd\xed\x01\x59\xdc\xec\x18\x77\xd7\xfb\x85\x0d\x2f\x9d\xf9\xff\x72\xea\x2f\x49\x3a\x9d\x3b\xc0\x95\x5e\x0c\xdb\x08\x6b\xf8\x70\x96\xf1\x0a\xb3\xfa\xaa\xa8\xd5\x77\x2b\xb6\x1f\xce\xf6\xfe\xf1\x58\x7f\xac\x00\x7a\x6f\x22\x7f\x79\xcc\xe2\x0d\xa1\x0c\xc8\x9b\xe2\x7a\x52\x5e\xc3\xf4\x7e\x0b\x6f\x83\xf7\x24\x09\xd2\x9e\x23\x38\x16\x82\x14\xe0\x40\xd4\x41\xda\x13\xfc\xb6\x01\xcb\xf1\x00\xb8\x4b\xa4\x60\xc9\x51\x62\x69\xcb\xd2\x5f\xbf\x56\x30\x7e\x21\x13\xa2\x19\x60\x26\x88\x49\xa4\x9e\x65\x9e\xaa\xa4\x99\x9e\x53\xc7\x62\xc2\x52\x29\x3e\x55\x6a\x40\x96\x62\xf1\x76\xb5\x98\x82\x62\x4b\x86\xfd\xf0\xaf\xb4\x23\x25\x69\x68\x92\x66\x97\xb7\x8e\xe3\x9e\x74\x20\xe8\x2d\x4a\x10\x6e\xd0\x8d\x2a\x09\xbb\x1d\xe9\x4c\xde\x9f\xdb\x2c\x29\x6f\x0a\x71\x93\x14\x0f\xf9\x2b\xb7\xaf\x7f\x5a\x7d\xff\xe6\xee\xdd\x1f\x9b\x71\xad\x27\x8d\xe3\xd8\xae\xa1\x76\x98\x28\xa6\x51\x4b\x67\x0d\x4d\x3c\xdd\xf4\x88\xf5\x2c\xa9\xde\x0f\xb8\x25\x37\x68\x8a\xf8\xda\xcb\xa0\xf7\x84\xf6\x6f\xe5\x44\x13\x46\x69\x90\x7a\xe8\x4e\x3a\x5a\x43\xfd\xb3\x06\xff\xcb\x40\xc8\x88\xf1\x28\xd8\x92\x1d\xcf\x2d\x7d\xee\x8a\x0b\x6e\x12\x8a\x45\xb5\xe6\xdd\xfb\xcd\xa9\xf9\x10\x4d\xa7\x61\xc7\x6e\x26\xb0\x09\xbe\xcb\x89\x74\x92\xd1\x1a\xea\x7d\x88\x69\x78\x59\x6a\x18\xad\x67\x31\x39\x92\xce\x5e\x3b\x50\x53\xbe\x9e\x03\x3a\x8c\xf1\x3e\xa8\x1d\x00\xbf\x4f\xcf\xaf\x7f\xf8\xf1\xcd\x37\x0b\x7d\x18\xc7\x92\x3f\x4d\xbe\x3b\x35\x65\x39\xe2\xd6\xd1\x29\x8f\xc1\x9c\xf6\x24\x89\x4f\x0e\xb7\x43\x17\x69\x4e\x96\xb0\x8d\x53\x24\x49\xcf\x1a\xa4\x4c\xe7\x1a\xea\x98\xb0\x65\x69\xff\xc5\x07\xaf\xb5\xbf\xc5\xe6\x40\x62\x4f\xce\xda\x85\xe0\x0c\xc6\x18\x1a\x2e\xd5\xcf\xad\x72\x50\xff\x29\xe0\x1a\xf8\x70\x53\xce\xcf\xb8\x2f\x97\x5c\xe9\xca\x3d\xff\xab\x2d\x2d\x5c\x72\x17\x06\xfa\xbc\x7b\x6c\x91\x22\xb6\x97\xad\xb9\xed\x22\x95\x73\x83\x2e\xa0\x35\x5b\x74\x28\x0d\xe9\x32\xb2\xdc\x77\xc7\xea\x9f\x00\x00\x00\xff\xff\xc2\x11\xd9\xcf\xe2\x08\x00\x00")

func templatesWeb_serverTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesWeb_serverTf,
		"templates/web_server.tf",
	)
}

func templatesWeb_serverTf() (*asset, error) {
	bytes, err := templatesWeb_serverTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/web_server.tf", size: 2274, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/db_mysql.tf":               templatesDb_mysqlTf,
	"templates/jumpbox.tf":                templatesjumpboxTf,
	"templates/load_balancer.tf":          templatesLoad_balancerTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf":                 templatesOutputTf,
	"templates/provider.tf":               templatesProviderTf,
	"templates/resource_group.tf":         templatesResource_groupTf,
	"templates/storage_account.tf":        templatesStorage_accountTf,
	"templates/subnet.tf":                 templatesSubnetTf,
	"templates/vars.tf":                   templatesVarsTf,
	"templates/vmss.tf":                   templatesVmssTf,
	"templates/vnet.tf":                   templatesVnetTf,
	"templates/web_server.tf":             templatesWeb_serverTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"db_mysql.tf":               &bintree{templatesDb_mysqlTf, map[string]*bintree{}},
		"jumpbox.tf":                &bintree{templatesjumpboxTf, map[string]*bintree{}},
		"load_balancer.tf":          &bintree{templatesLoad_balancerTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf":                 &bintree{templatesOutputTf, map[string]*bintree{}},
		"provider.tf":               &bintree{templatesProviderTf, map[string]*bintree{}},
		"resource_group.tf":         &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage_account.tf":        &bintree{templatesStorage_accountTf, map[string]*bintree{}},
		"subnet.tf":                 &bintree{templatesSubnetTf, map[string]*bintree{}},
		"vars.tf":                   &bintree{templatesVarsTf, map[string]*bintree{}},
		"vmss.tf":                   &bintree{templatesVmssTf, map[string]*bintree{}},
		"vnet.tf":                   &bintree{templatesVnetTf, map[string]*bintree{}},
		"web_server.tf":             &bintree{templatesWeb_serverTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
