// Code generated by go-bindata.
// sources:
// templates/db_mysql.tf
// templates/jumpbox.tf
// templates/load_balancer.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/provider.tf
// templates/resource_group.tf
// templates/storage_account.tf
// templates/subnet.tf
// templates/vars.tf
// templates/vmss.tf
// templates/vnet.tf
// templates/web_server.tf
// DO NOT EDIT!

package webserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDb_mysqlTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcb\xae\x9b\x30\x10\xdd\xf3\x15\x23\xab\xab\x4a\xbd\xea\x2b\xea\x2a\xbb\x56\x77\x7b\xff\xc0\x1a\xf0\x04\x59\x31\x63\x3a\x63\x53\xa5\x11\xff\x5e\x61\x20\x24\xb9\xa8\x2c\xcf\x9c\xc7\x18\x1f\x0f\x28\x1e\xeb\x40\x60\x88\x5b\xcf\x64\x07\x12\xf5\x91\x0d\x5c\x2b\x00\x47\x27\xcc\x21\xc1\x11\xcc\xe1\xe5\x87\xa9\xc6\xaa\xda\x04\x4d\x14\x52\x03\xd7\x07\x50\x53\x14\x6c\xe9\x19\xae\xb1\x39\xe7\xde\x0a\x25\xe2\xe4\x23\x5b\x87\x17\x7d\xce\xf8\x76\x78\x0c\x70\x98\xb0\x46\x25\x9b\x95\x84\xb1\x7b\xe7\x7a\x23\xf4\xa8\xfa\x27\x8a\x9b\x09\x42\x1a\xb3\x34\x04\x06\xff\x66\x21\xe9\x6c\x77\xd1\xdf\xc1\x2a\xc9\x40\x62\xc0\xb8\x7a\x46\xe6\x05\x26\x67\xd8\xfd\x8e\x60\x3e\x5c\x07\x94\x17\xe2\xc1\x4e\xb4\xf1\xd3\xac\xab\x00\xd6\x10\xdb\x4a\xcc\xbd\xbd\x33\x29\xaa\x35\xf9\x91\xf6\x72\xce\x1c\x32\x3f\xa3\xc5\x7a\x32\x0d\xb1\xc1\xe9\xf7\xfc\x67\x95\x95\x32\x9a\xaa\x02\xd0\x73\x2e\x67\x58\x4e\x71\x04\xf3\xfa\x66\x5f\x89\x0f\x76\x66\x97\x3b\x2a\xd6\x00\x0d\xf6\xd8\xf8\x74\xd9\xbc\xee\xa7\xc9\x93\x14\x3d\x31\x09\x86\xb7\x2c\x7d\x54\x9a\x67\x27\xec\x7c\xb8\x2c\xd3\xc3\x84\x8d\x25\x7c\xbe\x6b\xdb\x4b\x3c\xf9\x40\xcb\x22\x2b\xda\xd5\x5b\xd0\x82\xc1\x47\xf8\xf2\xf9\xeb\xf7\x25\x71\xb7\x13\x9b\x66\x77\xbc\x48\x5b\x8a\x56\xc8\x65\x76\xc8\xc9\xce\xcc\x49\xf9\xd3\xeb\xd4\x0c\x77\x5b\x11\x5d\xe7\xd9\x6b\x12\x4c\x51\x6c\x88\xad\xe7\x2d\xe1\x5d\xbf\x8a\xfb\x8e\xe4\xd6\xaf\x1d\xed\x3a\x2a\xda\xe5\xf1\xdc\x17\xe7\xfe\x51\x15\x8e\x6a\xb0\xc4\xa7\x28\x0d\x75\xc4\xe5\x6d\xfd\xe2\x65\xeb\xb1\xfa\x17\x00\x00\xff\xff\x43\xf9\xfb\x23\x90\x03\x00\x00")

func templatesDb_mysqlTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesDb_mysqlTf,
		"templates/db_mysql.tf",
	)
}

func templatesDb_mysqlTf() (*asset, error) {
	bytes, err := templatesDb_mysqlTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db_mysql.tf", size: 912, mode: os.FileMode(480), modTime: time.Unix(1541058326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJumpboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x4b\x6f\xe3\x46\x0c\xc7\xef\xfa\x14\xac\xda\xab\x8d\x26\x0d\x7a\xd3\x29\x45\x81\x02\x29\x5a\xc4\xfb\x38\x2c\x16\x03\x5a\xa2\x64\xae\x25\x8e\xc0\x99\x51\x5e\xf0\x77\x5f\xe8\x19\xbf\xbd\x8b\xdd\xe4\x10\x08\x43\xce\x9f\xd4\x4f\x7f\xd2\x4a\xce\x06\x4d\x09\x62\x7c\x0e\x4a\x5a\x99\x3a\x2c\x4b\x4e\x0d\xd7\x31\xc4\xeb\x20\x65\x10\xf3\x25\x54\xf5\xd2\x3e\x6e\x87\x5e\x22\x00\xc1\x8a\xe0\xd4\x5f\x02\xf1\x6f\x2f\x0d\xea\x9c\xa4\x31\x6d\xe6\x66\x36\xc8\xcc\x7a\x99\x19\xd7\x71\x04\x50\xda\x14\x3d\x5b\x39\x2d\x32\x36\x36\xb6\x6a\x0a\xb5\xa1\x9e\x0f\xbd\xed\x9d\x8e\x72\x9b\x56\x7b\x37\x66\x76\xfb\xfd\x7e\xed\xee\x2d\x5a\xdd\x89\x83\xc1\x2c\x53\x72\xce\x60\x39\xbd\x47\x02\xb1\xf3\xe8\x39\x8d\xa3\x4d\x14\x1d\xf2\x15\xf2\x0f\x56\xd7\x86\xc5\x93\xe6\x98\xd2\x21\x67\xe1\xf4\x12\xe1\x33\x78\xdb\xdb\x67\xc1\xbe\x19\xd5\x1f\x40\x3a\x52\x71\x94\x06\x65\xff\x34\x88\x73\xb6\x2b\x7a\x3c\x6d\xbe\xcf\xef\x78\x16\x67\x5d\x29\xae\x4d\x6a\x25\xe7\x22\x68\x0f\xa8\x25\x7d\xc1\xcd\x17\x78\xf7\x56\x06\x70\x61\x29\xe4\xdb\xae\x2f\xba\xb9\x4f\x9d\x3b\x94\xf1\x71\x68\x0f\xa0\x56\x6e\xd0\xd3\x69\x7f\x65\x4f\x82\x55\xff\x95\x8f\x99\x71\xbb\xfc\x4e\xcd\x29\x75\x1f\xd8\x6b\x60\x68\x62\x73\xdc\xbb\x0d\xab\x0f\x58\x9a\x0a\xd3\x15\xcb\xa1\x73\xcf\xb9\xf6\x34\xc1\xd3\x6e\x7d\x13\xa7\xfe\x04\x97\x4e\xb3\x6b\x38\x73\x90\xc0\xa7\x23\x16\x9d\x72\x0e\xdc\xc9\x69\x87\xf9\x73\x04\xd0\x54\xc6\xf1\xf3\x3e\xad\x04\xe2\x85\x47\xc9\x50\x33\xf3\xd7\xe2\xda\x34\xd7\x71\x14\x45\x00\xbf\xc2\xad\xad\x2a\x12\x0f\x7e\xc5\x0e\x4a\x16\x02\x6f\x61\x4d\x54\x83\x5f\x11\xfc\xb7\x80\x8c\xdd\x1a\x30\xf7\xa4\x90\x51\x49\x9e\xa5\xe8\x42\x1f\xfe\x8d\xa0\x3f\x21\x63\x9d\x69\xd3\x8c\x15\xe3\x49\x2b\x96\xd1\x58\x5e\x03\x7d\x4b\x9d\x0c\x3d\x76\x95\xdc\xa5\x52\x6d\x66\x57\xcc\x9d\xae\xe6\xbc\x55\x2c\xc8\x70\xd5\xfe\x57\xca\x49\x49\x52\x1a\xc6\xb2\xb3\xa6\x5b\x91\xb6\x54\x6e\x51\xac\x70\x8a\x65\x6f\x7d\x9b\xe7\xa4\x23\xb1\xf7\xcb\x20\x3e\x2c\x48\x1b\xd2\x61\x1a\xd7\xe1\x15\xe8\xd5\x9f\xf3\xdf\x6f\x66\x77\xef\x16\x7d\xac\x21\x75\xbd\xdd\x12\x88\x4b\xf4\xe4\x7c\xef\xfb\xad\x86\x06\x4e\x27\xf7\xc3\x99\x9d\xd0\xde\xeb\x0b\xa5\xdd\xa8\x14\xbb\xd7\xee\x09\xb3\x8f\xca\x9e\x86\x1c\xa5\x76\xde\x6d\x3d\x4d\x40\x02\xf1\xdf\x6a\xab\x7f\x5a\x24\x7d\x4e\x85\x82\x05\x65\xfd\x97\xf3\x4f\x35\xed\xb8\xe4\xee\x7e\x31\xb5\x6f\x9d\xa9\xd5\xe6\x5c\x8e\x08\x53\x5b\xd5\xc1\x93\x0e\x03\x90\x40\xbc\x35\x78\x00\x98\x55\x2c\x26\x38\xd2\x2e\x9e\x40\xdc\xd2\xe8\x4e\xb7\x13\x6a\x74\xee\xc1\x6a\xb7\x90\xff\x1f\x9e\xaf\xae\xff\xb8\xf9\xe5\x48\x61\x53\xb2\x84\xc7\x61\xcd\x0e\x5d\x64\xec\x70\x59\xd2\xa4\x63\x30\xf8\x15\x89\xe7\x69\xaf\xe5\x58\x3a\x1a\xc5\x3c\x16\x6e\xb8\x49\xd2\xb0\x5a\xe9\x0c\xd9\xff\xba\x16\x2c\xc5\xb8\xa6\xbe\x06\x00\x00\xff\xff\x3e\xba\x20\x79\xc2\x08\x00\x00")

func templatesJumpboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesJumpboxTf,
		"templates/jumpbox.tf",
	)
}

func templatesJumpboxTf() (*asset, error) {
	bytes, err := templatesJumpboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox.tf", size: 2242, mode: os.FileMode(480), modTime: time.Unix(1541058326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoad_balancerTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x3f\x8f\xd4\x30\x10\xc5\xfb\x7c\x0a\xcb\xa2\xcd\x42\x49\xb3\x05\x27\x21\x81\x44\xb1\x42\xf4\x96\x63\xfb\xf6\x4c\x7c\x1e\xe3\x3f\x5b\xb0\xca\x77\x47\x76\xe2\xbd\x4b\xe2\x39\x09\x0e\x0a\xb6\xdc\x79\x79\x9e\xf9\x3d\x7b\xbc\x0a\x90\xbc\x50\x84\xf2\x9f\xc9\x2b\xff\xc8\x5c\x1a\x8c\x16\x4c\x3b\x4a\xe8\x98\xac\x49\x96\x19\xe0\x92\x0d\xdc\x70\x2b\x94\x2f\x95\x6b\x47\x88\xe5\x8f\x8a\x60\xbf\x23\xa1\x6f\xae\x17\xee\x0f\xca\x5e\x58\x56\x4e\x7d\x76\xe9\xab\x4b\xaf\x1d\xed\x08\x31\x20\x78\xd4\x60\x71\x8f\xda\x56\x6d\x94\x9d\x3d\x24\x77\x58\x3a\xdb\xfc\x5b\xed\xa6\xec\xbd\xae\xb1\x75\xbb\xbf\xef\x5d\x86\xc8\xbe\x37\x40\x8c\x4b\xe9\x55\x08\x8c\x9b\xdb\x1c\x47\x42\x43\xe4\x51\x8b\xac\x0c\x63\x42\x01\x3d\x11\x5a\xd3\x0d\x63\x9a\x68\x37\x75\xdd\x3e\x19\x33\x20\x91\xe0\x79\xb4\x62\x18\x30\xf0\xff\x80\xf7\x2b\x30\xb7\xe0\xbd\xc8\x8c\x90\x7b\x0f\x36\x2a\x2b\x73\x36\x02\xec\xbd\x3e\x27\x3f\x4f\x99\xf9\x20\x37\xf6\x48\xe8\xa9\x24\xfa\xf9\xf4\x61\xce\x93\x16\xf1\x3e\x66\x2d\xd7\xf3\xdc\x14\x07\xe4\x9d\x1c\xb4\x2c\x7d\x4d\x58\x9e\x6c\xe0\x62\xcc\x0d\xd7\x23\x1c\x80\xc1\xde\x5d\x5b\x7b\xfd\xfb\xe4\xf3\xb1\x4f\x53\xc8\xfd\xdd\x30\x43\x73\xe2\x3a\x2e\x72\x11\xef\xb8\x18\x3f\x5a\xb9\x40\x3e\xe5\xee\x51\x2e\xce\xc3\xa0\x30\x10\x4b\xf1\xff\x99\xfc\x21\x46\xd7\x07\xe5\x2f\xda\x9e\xfb\xb9\xfb\xbc\x47\x3c\x44\x10\x60\x36\xe2\x4f\x31\xba\xf9\x39\xfd\x48\x2a\x44\xe6\x78\x7c\x78\x56\x7e\x5b\x3e\x05\x1f\xf7\xe7\xbc\x7f\x87\xf2\xf4\xc9\x64\x9c\xdf\xc1\x4a\x48\x1b\x9c\x73\x0d\xa3\xf9\xaa\xfd\xf0\x22\x58\xcc\xf9\x0f\x18\xaf\xad\xbe\xdc\x7d\xcd\x23\x21\x88\xd7\xda\x6f\xc2\xad\x36\x47\x8b\xec\xc2\x96\x90\xfa\x02\xdb\xa2\xaa\x42\xb7\xd0\xed\x7a\x36\xf6\x4d\xeb\x71\x3f\x03\xb5\x01\xd4\xdc\x05\xed\x2d\xd4\x54\x2e\x28\xcb\x55\x6c\xc4\x81\x1c\x5a\xe4\xed\x53\xe6\x52\xb1\x9d\x7e\x05\x00\x00\xff\xff\x55\x3f\x0e\x54\x53\x08\x00\x00")

func templatesLoad_balancerTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoad_balancerTf,
		"templates/load_balancer.tf",
	)
}

func templatesLoad_balancerTf() (*asset, error) {
	bytes, err := templatesLoad_balancerTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/load_balancer.tf", size: 2131, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x93\x31\x6f\xfa\x30\x10\xc5\xf7\x7c\x8a\x93\xf5\x9f\xfe\x52\x10\x65\xea\xc2\xd0\xad\x9d\xdb\xdd\x32\xce\x15\x52\x82\x2f\xba\xb3\x81\x16\xf1\xdd\x2b\x87\xa4\x85\x90\x44\x14\x75\xa2\x19\x93\x5f\xde\x9d\x9f\xdf\x63\x14\x0a\x6c\x11\x94\xf9\x08\x8c\xbc\xd2\x0e\xfd\x86\x78\xa9\x05\x6d\xe0\xdc\xbf\xeb\x39\x53\x28\x15\xa8\x65\x70\x45\x70\xfa\x2d\xac\xca\x19\x6d\x7b\xb9\x5d\x02\xe0\xcc\x0a\xa1\xf5\x4c\x41\xfd\xdb\xad\x0d\x8f\xd0\xad\x75\x04\xf6\x69\x2d\x95\x3a\x99\xab\x04\xa0\x20\x6b\x7c\x4e\xee\xec\xaf\x66\xb5\x66\xd9\xc3\xa8\x51\xbd\x50\xeb\x6d\xa3\xb2\x8f\x92\xa7\xdf\xaa\xb1\x57\x48\x56\xdb\xaa\x64\x9f\x24\x17\xd8\xc5\xa1\xc0\x0b\xdc\x8a\x98\x16\x59\xf4\x1b\x76\x64\xc1\x43\x51\xd0\x26\x7d\x96\x45\x3c\x53\xc9\x39\x45\x89\x6e\xf6\x6e\x3c\x4e\x00\xb2\x9c\xd1\xb6\xbd\xfc\xd6\x7b\x72\x33\x0a\x2e\x8b\x6a\xc6\x5a\x14\x19\x9e\x7c\x98\x4a\x9e\x2c\x15\x3d\xdc\x8b\x2d\x23\x55\xdb\x56\x12\x7b\xcd\xc6\xcd\xf1\x94\xfa\x1f\x99\x0c\xc5\xe7\xae\xba\xa3\x33\x70\x0a\x6a\x32\x39\x12\x32\x59\xc6\x28\xa2\x4b\xc6\xd7\x7c\x3b\x20\xd4\x06\x1b\xa6\x2b\x00\xd7\x67\xab\x0e\x02\x40\x77\xf8\x3b\xf2\xd5\x0d\x8e\x2e\xea\xd2\xcf\x72\xd7\xaa\xa9\x20\xaf\x91\x7f\xa3\xa5\x07\xa5\x5b\x2e\x69\x9f\x57\x55\x47\x17\xde\x0f\xf8\xd5\xae\x4a\xfa\x18\xf1\xdb\x6f\xe9\xfd\xf8\xef\xb4\x74\xb0\x4a\x5f\xb9\xfb\x0c\x00\x00\xff\xff\xaf\x5a\x5b\xc6\x4a\x07\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 1866, mode: os.FileMode(480), modTime: time.Unix(1541058326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\x41\x0a\xc2\x40\x0c\x85\xe1\xfd\x9c\x22\x0c\xae\x7b\x03\xcf\x12\x82\x04\x29\x9d\x49\x4a\x4c\x22\x58\x7a\x77\x51\xa8\xd8\x0a\x6e\x1f\x7f\xbe\x68\xf8\x1c\x0e\x95\x25\x47\x53\xe9\x2c\x5e\x61\x29\x00\x49\x2d\x18\xce\x50\x4f\x4b\x92\x0d\xf4\x08\x63\xfc\xaa\xd6\x5a\xd6\x52\xb6\x73\xe3\x9b\x86\x5d\x18\xaf\xa6\x31\xa3\x50\xe7\x1f\xe6\x4d\x58\xc7\x7d\x3b\x4c\x21\x2d\xe4\xb8\xbe\x84\xfd\x8b\x14\xf6\xff\x70\x8e\xe6\x41\x0d\x85\xfd\xae\x36\x6d\xf2\x71\xfe\xd0\xcf\x00\x00\x00\xff\xff\xb3\xf3\x67\xee\xfc\x00\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 252, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xc1\x0a\xc3\x20\x0c\x40\xef\x7e\x45\x90\x1d\x36\x18\xfb\x83\x7d\x4b\x71\x36\x87\xb0\x36\x4a\x8c\x1e\x56\xfc\xf7\x51\x0b\xb5\x14\x36\x8f\xbe\xf7\x92\x44\x09\x85\x46\x14\xb0\xee\x93\x05\x65\xb6\xb0\x18\x00\x3f\x11\xb2\x0e\x34\xc2\xf6\x9e\x60\x2f\x4b\x71\xf2\x68\xd6\xb0\xe3\x6a\xbb\x9c\xd0\x0b\xea\x4f\x79\xc3\x2d\x48\xf9\x95\xbc\x50\x54\x0a\xbc\xee\x38\x05\x27\xdc\x12\x45\x76\x7f\x0e\xda\x71\x93\x91\x0b\x49\xe0\x19\x59\xbb\x3c\x85\xf0\xce\xf1\xba\x36\x07\x9e\xee\xd0\xa7\x1c\xfe\x6f\xd5\x9a\x6a\xbe\x01\x00\x00\xff\xff\xcd\xed\xb3\xce\x1e\x01\x00\x00")

func templatesProviderTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderTf,
		"templates/provider.tf",
	)
}

func templatesProviderTf() (*asset, error) {
	bytes, err := templatesProviderTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider.tf", size: 286, mode: os.FileMode(480), modTime: time.Unix(1541042574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4a\x2d\xce\x2f\x2d\x4a\x4e\x55\x50\x4a\xac\x2a\x2d\x4a\x2d\xca\x8d\x87\x89\xc4\xa7\x17\xe5\x97\x16\x28\x29\x28\x65\x97\xe6\xe5\x94\xe6\x61\x88\x57\x73\x29\x28\xe4\x25\xe6\xa6\x2a\x80\x80\xad\x82\x92\x4a\x75\x59\x62\x91\x5e\x6a\x5e\x59\x3c\x48\xb4\x56\x17\xa2\x4d\x89\x4b\x41\x21\x27\x3f\x39\xb1\x24\x33\x3f\x0f\xa1\x0a\x26\x52\xab\xc4\x55\xcb\x05\x08\x00\x00\xff\xff\x26\x45\x5a\x39\x83\x00\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 131, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorage_accountTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\x51\x4e\xc3\x30\x0c\x06\xe0\xf7\x9e\xc2\x8a\x78\x00\x69\xdb\x0d\x76\x03\x9e\xd8\x01\x2c\x37\x75\x47\xb4\xcc\xa9\x5c\x67\x52\x99\x7a\x77\x94\x8e\x88\xc2\x86\xc8\x63\xf2\xe5\xcf\xef\x28\x8f\x29\xab\x67\x70\xf4\x91\x95\xf5\x8c\xa3\x25\xa5\x23\x23\x79\x9f\xb2\x98\x03\xd7\x71\x4f\x39\xda\xfd\xc9\xb5\x01\x10\x3a\x33\x3c\x5c\x7b\x70\x4f\x57\xe5\x21\x92\xe7\xe7\x0b\xe9\x8e\xe5\x82\x85\x6f\xc0\x6d\xdd\x06\x9c\x7b\x99\xb7\x23\xb9\x06\xa0\xb6\xc0\xa3\xa6\x3c\xe0\x2a\x73\x09\xa9\xd5\x7e\xb2\xdd\x29\x4b\xcc\xf2\x7b\xb7\x5c\x9e\x4b\x68\x4c\x9e\x2c\x24\xf9\xa3\x59\x69\x54\xc9\xe2\xbf\xc6\xc2\x53\x90\xee\xce\x1f\x6e\xb3\xaf\x9d\x05\xd6\x07\x8e\xa4\x23\xed\xd6\xb0\xfc\x41\xb8\x3d\x84\x36\x0d\xbc\xc0\xd7\xb7\x43\x31\x2c\xd4\x46\xc6\x36\xa6\x16\x59\xbc\x4e\x43\xad\xbc\x07\xd3\xcc\xdf\xa4\x0f\x91\xff\x21\xef\x66\xc3\x88\xa6\xd4\xf7\xc1\x63\x92\x38\x55\x32\x37\x9f\x01\x00\x00\xff\xff\x9c\x2c\x1c\x64\xe9\x01\x00\x00")

func templatesStorage_accountTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorage_accountTf,
		"templates/storage_account.tf",
	)
}

func templatesStorage_accountTf() (*asset, error) {
	bytes, err := templatesStorage_accountTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage_account.tf", size: 489, mode: os.FileMode(480), modTime: time.Unix(1541058326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSubnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xc1\x0a\x82\x40\x10\x06\xe0\xbb\x4f\x31\x2c\x1d\x0a\x4c\x3c\x76\xe9\x49\x22\x96\x49\xa7\x10\x75\x94\x59\xc7\x22\xf1\xdd\x43\x6d\x25\xf7\xd6\xde\x76\xf8\xe7\x1b\x7e\x21\xd7\xa8\x64\x04\x06\xdf\x2a\x24\xb5\x75\x7a\x63\xea\x0c\x18\x87\xbc\x7e\x86\x08\x80\xb1\x26\x08\xdf\x19\xcc\x6e\xe8\x51\x12\xe2\xde\x4e\x89\xf1\xf8\xdd\x89\x00\x3c\x6e\x1f\xd2\x68\x6b\x17\x60\xde\xf0\xc7\xb6\x89\xa4\x54\xae\x94\xc3\xe9\xcc\x4e\x5e\x5f\x48\xa7\x58\x59\xa6\xee\xd9\x48\xb9\x80\x1b\x2f\x48\x78\x30\x1c\xaf\x22\xe6\xb9\x90\x73\xb6\x15\xba\x17\xaf\xdf\x4e\x59\x91\xcb\xd2\x64\xff\x27\xee\x4d\xd7\x62\x46\x97\xf4\x1a\xc3\x29\x86\xf4\x30\x9a\x68\xfc\x04\x00\x00\xff\xff\x39\x0c\xf3\xab\x6e\x01\x00\x00")

func templatesSubnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSubnetTf,
		"templates/subnet.tf",
	)
}

func templatesSubnetTf() (*asset, error) {
	bytes, err := templatesSubnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/subnet.tf", size: 366, mode: os.FileMode(480), modTime: time.Unix(1541058326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6e\xe3\x30\x0c\x45\xf7\x3e\x05\xa1\x03\xcc\x4c\x32\xc0\xec\xbc\x18\xa4\x40\x0e\x10\x74\x55\x14\x02\x2d\xb1\xa9\x10\x99\x32\x48\xc9\x41\x13\xe4\xee\x85\x9d\xb4\xb1\x93\xb6\xf6\x8a\xfa\x0f\x9f\xfa\x5f\x3d\x4a\xc0\x26\x12\x18\xe2\xde\x32\xb6\x64\xe0\x78\xaa\xaa\xd9\x79\x90\xc4\x2d\x71\x56\x03\xc7\x0a\x20\xbf\x75\x04\x35\x98\x16\x3b\x53\x01\x78\x7a\xc1\x12\x33\xd4\xa3\x08\xf0\xff\x50\x84\x56\x31\x15\x0f\x97\xaf\x06\xd3\x95\x26\x06\x67\xae\xc0\xe3\x66\x9d\x7a\x92\xd1\x77\x00\x8a\x6e\x3f\xe7\x09\xb6\x26\x69\x91\x2f\x6e\x35\x98\xed\x38\x4f\x80\xd5\x6b\x60\xfc\xd8\x56\x83\x71\xc3\x3c\xe8\xa7\xea\x34\x49\x81\x03\x6b\x27\x59\x6e\x63\x9e\x81\x4c\x8c\x9c\x6d\xf0\x5f\xcb\x5a\x1a\x75\x12\xba\x1c\x12\x7f\x0b\xb9\x18\xe8\x07\x8f\x8b\xac\xe4\x84\xee\x6e\x11\x93\xc3\xc1\xfc\x5c\xf4\xb5\x59\x43\xa8\xb9\xe8\xd2\x54\x33\x7c\x57\x38\x16\xb6\x7d\x90\x5c\x30\x5a\xa6\xbc\x4f\xb2\xb3\xe8\xbd\x90\xaa\xd5\x0e\x1d\x4d\xde\xec\xdc\x50\x0c\x9a\xe7\xef\xf6\x64\x16\x7f\x7e\x8d\xff\xef\xc5\x3f\xf3\x3c\xdf\xb1\xa7\xc6\x2a\x49\x4f\x62\xfb\xd6\xba\x54\xee\xbb\x9b\x23\x1a\x0e\x74\x77\xff\x4d\x46\xf6\x28\xde\x3e\x2c\xd5\xf6\x7f\x6f\x72\xc4\x84\xde\x36\x18\x91\x1d\x89\xd5\x5d\x19\x37\xbc\x07\x00\x00\xff\xff\xa9\xf4\x23\x83\x9c\x02\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 668, mode: os.FileMode(480), modTime: time.Unix(1541055905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVmssTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\x51\x8b\xe3\x36\x10\xc7\xdf\xf3\x29\x84\xe9\xeb\x06\x67\x7b\x57\xe8\x83\x1f\x4a\x69\xe1\xe0\x0a\xcb\xed\x95\x3e\x94\x22\xc6\xd2\x38\x2b\x22\x4b\x62\x24\x65\x2f\xb7\xe4\xbb\x17\xc9\x56\x62\x27\x36\x4b\xa9\x9f\x12\xe9\xaf\xff\xfc\x34\x1a\x6b\x4c\xe8\x6d\x24\x81\xac\x82\xef\x91\x90\x7a\xae\x5b\x6e\x20\x70\x67\xad\xae\x58\x75\x88\x46\x47\xc3\x8f\xbd\xf7\x93\xe1\xb7\x0d\x63\x65\x25\xdf\x93\x8d\x8e\x1b\xe8\x91\x4d\x9e\x86\x55\x3f\xbc\x15\xcf\xb9\x76\x3b\x9a\xde\x8c\x26\x87\x73\xb5\x61\xec\xd6\xea\xe6\x69\x0a\xd5\x83\xf7\x2f\x49\xaf\x2d\xc8\x16\x34\x18\x81\xc4\x95\x5c\xd0\x5f\x49\x74\x5b\xa2\xa7\x55\xbc\x2c\xdb\x2a\x99\x43\x3b\xb2\xc1\x0a\xab\xd7\x43\x7f\x15\x2e\x09\x3b\xb2\x26\xa0\x91\xdc\x59\x0a\xdc\x07\xa0\x30\x17\x7e\xac\xeb\xba\xbe\x13\xa2\x91\xb7\x8e\x1f\xeb\xdd\xee\xe7\x0d\x63\x2d\x88\x43\xd1\x2d\x86\x7e\x7c\x9c\xda\x29\xc7\x85\x35\x9d\xda\x47\x82\xa0\xac\x19\x0e\xa0\x61\xd5\x53\x6c\xb5\x12\x9f\x9e\x7e\x91\x92\xd0\xfb\x6a\x73\xde\x6c\xee\x4f\xf9\xa8\x28\x44\xd0\xbc\x07\xf1\xa2\x0c\x72\x2f\x40\x23\xf7\x18\xe6\x67\x3e\x1c\xf5\xfa\x81\xe4\xdc\x1e\x81\xb6\x68\x8e\x99\xe0\xfc\x90\x97\xe5\x53\x11\x19\x6c\x65\xd1\x7f\x2a\x8d\xe2\x95\xcf\x68\xbd\xf0\xfe\x47\xcd\x45\xb7\x27\x90\xc8\x9d\xd5\x4a\x9c\x78\x6f\xe5\xc4\xf4\x0f\x30\x11\x74\x2e\x4d\x0c\xaf\x96\x0e\xdc\xa3\x88\xa4\xc2\x69\x64\x50\x72\x1e\x7b\x59\x56\x18\x3c\xd2\x11\x69\x4d\x34\x56\xa2\x3f\xc4\x9c\xfb\x49\xf6\x2f\xc9\x7e\xc5\xb6\x98\x1c\x7b\xee\xd5\xf7\x61\x0f\x8c\x05\x85\x54\xa4\xcf\x01\x8c\x04\x92\xc3\x8c\x00\x07\x42\x85\xd3\x9a\x89\xb0\xd1\x84\xec\x72\xde\xa4\xe8\xc1\x12\xec\x91\x3b\xb2\x9d\xd2\xc8\x55\x9f\xfe\x11\x76\x48\x68\x04\x8e\x64\x2e\x95\x9a\x7f\x41\x4a\xae\xbf\x82\xb1\x46\x89\x21\x4f\x8c\xd9\xae\xbb\xb2\xfc\xd9\x46\x13\xe2\x73\x8e\x36\x4c\xa7\xed\x5d\xf2\xbb\xfb\x69\x5b\x7f\x78\xf8\xfc\xf5\x79\x98\x3b\x22\xf9\xa1\x70\x1a\x56\x69\x08\xe8\xc3\x2a\x98\xf5\x5c\x2a\x7f\xb8\x4d\xd5\xb4\xd6\x4a\x02\x52\xa1\xef\xe7\x53\x5f\x10\xe4\x5f\xa4\x02\x8e\x1a\x42\x08\xc8\xad\xbb\xd4\x6d\xc3\xaa\xdf\xc9\xf6\x9f\xd2\xf6\x07\x4d\x0f\x06\xf6\x28\x73\x54\x1e\x4e\x0e\xa7\xb9\xe6\x9f\xbf\x3c\xaf\xa2\x4a\x08\x30\x85\xd5\xd1\xcc\x49\xeb\x25\xd0\x77\x29\x1b\x56\xfd\xd6\xbb\x70\x1a\x26\x33\x56\xaa\x08\xbe\x6f\xf3\xea\x5d\x5d\x78\xac\x2f\x28\x23\x80\xb0\xbd\x8b\x21\x55\x22\xf4\x09\x13\x3b\xf5\x6d\xf9\x8d\x1e\xbc\x41\xf6\xca\xf0\xe8\x91\xe6\xef\x5c\x7f\xca\x33\x53\x91\x03\xef\x5f\x2d\xc9\xab\xe8\x29\x8d\xa4\xa1\xdd\xe3\x8f\x1f\xaa\x7b\x26\xae\x95\x89\xdf\xc6\x3b\x6d\x04\x94\xca\x43\xab\xf1\xe2\xc6\x21\x86\x17\x34\x41\x8d\x37\x4b\xc3\x3a\xd0\x1e\x8b\x59\x79\xa1\xe6\xbb\x2c\xac\x97\xb6\x91\x2e\xa8\x51\x3a\x2a\x07\x72\x47\xaa\x07\x4a\x6f\x48\xa0\x88\x9b\x3c\x76\x7b\xcb\x8e\x9e\xef\xf6\xa8\xc9\xe9\xdd\x05\x55\x6e\x66\x59\x8d\x8e\x25\xfc\xbb\x8e\x99\x6e\xf8\xe3\x63\x6b\x30\x2c\xf4\xbc\x3b\x8a\xeb\xdd\x34\xac\xd9\x7a\x30\xe5\xe7\x78\xe3\xa4\x67\xd6\x14\x79\x69\x49\x30\xb4\x92\xdc\xfc\xb9\x92\x9e\x35\xec\xef\x59\x4f\x5d\x54\x2e\x36\xda\x65\x65\x22\xf8\x67\x11\x41\x99\xd6\x46\x23\xf3\xb7\x07\x45\x8d\x3e\xc7\xcf\x7b\xba\x41\x28\x5f\x27\xdb\xa5\x4f\x96\x49\x84\x73\x2e\x97\xf3\xbf\x01\x00\x00\xff\xff\x7c\xd2\x19\x19\xf9\x08\x00\x00")

func templatesVmssTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVmssTf,
		"templates/vmss.tf",
	)
}

func templatesVmssTf() (*asset, error) {
	bytes, err := templatesVmssTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vmss.tf", size: 2297, mode: os.FileMode(480), modTime: time.Unix(1541058326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x73\x8a\x10\xdc\x5a\xed\xc6\x9d\x27\x11\x19\x42\x1b\xa4\xb4\xcd\x94\xcc\x64\x04\x4b\xef\x2e\xad\x56\xb0\x9a\xec\xf2\x1f\xff\x45\x39\x06\xd3\x8a\x01\xe9\x61\xca\xda\xfb\xdc\x68\x32\xea\xbc\x70\xba\x07\x6d\x11\xb0\x35\xe9\x4c\x7e\x83\xd1\x01\x08\xf5\x0c\x9b\x39\x03\xee\xc6\x4c\x5a\xb0\x64\x3f\x03\xd3\x3e\x0b\x27\x74\x00\xab\xce\xdf\x34\xd8\xb0\x84\x2f\x7c\xb5\x7f\x03\xc5\x5b\xbd\xb9\x2e\x9d\x73\x1d\xd5\xb5\x72\x8c\x3e\x0e\x54\xf1\xc7\x7e\xc1\xf2\x58\x2c\x7b\x28\x4f\x78\x75\x00\x5d\xa8\x28\x35\x41\xfe\x7e\xb9\x86\x13\xba\xc9\x3d\x03\x00\x00\xff\xff\x11\x4f\x1f\xbb\x10\x01\x00\x00")

func templatesVnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVnetTf,
		"templates/vnet.tf",
	)
}

func templatesVnetTf() (*asset, error) {
	bytes, err := templatesVnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vnet.tf", size: 272, mode: os.FileMode(480), modTime: time.Unix(1541058326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesWeb_serverTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\x4c\xd5\x9c\x0a\xac\xd1\xb4\x41\x6f\x3e\x05\x28\x50\x20\x45\x8b\xb8\x1f\x87\x20\x20\xc6\xe2\x58\x1e\x98\x1c\x0a\x43\x52\x9b\x64\xe1\xff\x5e\x88\x92\x1c\x7b\x2d\x77\xb7\x0b\xd4\x07\x43\x12\x1f\x87\x8f\x8f\xf3\x1e\x2b\xa5\x18\xb2\x36\x04\x35\x7e\xc9\x4a\xea\x8d\x50\xba\x0f\x7a\x30\x2c\x89\x74\x87\x0d\xd5\x50\x1f\xb2\xb8\x2c\x46\xb8\xa9\xe1\xa1\x02\x10\xf4\x04\x8f\x7e\x6b\xa8\x5f\x3d\xf4\xa8\x2b\x92\xde\x0c\x80\xe3\x9d\x70\x73\xf7\xea\xa1\x09\x59\xd2\x8a\xc5\xd2\xa7\x63\x5d\x01\x94\xf7\x5b\x93\xef\x69\x6b\x22\x69\x4f\x6a\x7a\x6f\x0a\xb4\x4c\x72\xa1\xc1\xc4\x41\xae\x26\xcd\xb4\xe7\x8d\x98\x56\x43\xee\x56\x13\xe3\x47\x5f\xe7\x2a\xa5\xe4\xe5\x58\xa1\xfc\x82\x92\x65\xa7\x75\x55\x01\x70\x67\x9a\x20\x3b\x6e\xb3\x8e\x54\x07\xa5\x96\xb5\x7a\x4a\x35\xee\x16\x74\x03\x88\x79\x2b\x94\x0c\xdb\xdb\xa5\x66\xee\x23\x74\x15\x51\xe6\x47\xb6\x53\x95\x4e\xb9\xc7\x44\x86\x3b\x83\xd6\x2a\xc5\x68\xd0\x9d\xf4\x5d\x43\x6d\x3f\x0b\x7a\x6e\x06\xf4\xb1\x3a\x56\x0b\x3d\xd2\xb3\xa6\x8c\xce\x78\x6c\xf6\x2c\x67\x1d\xd2\xfb\xdb\x0d\xb2\xb8\xd9\xde\x2f\xec\x74\xe9\xb0\xff\x97\xe3\x7e\x49\xd1\xe9\xc0\x01\xae\x8c\x62\xd8\x46\x58\xc3\x87\xb3\x8a\x57\x98\xd5\x57\x2b\xad\xbe\x5b\xb1\xfd\x70\xb6\xf7\x8f\xc7\xfa\x63\x05\xd0\x7b\x13\xf9\xcb\x63\xf9\x6e\x38\x64\x40\xde\x74\xd5\x93\xbe\x1a\xda\xf6\x5b\x78\x1b\xbc\x27\x49\x90\xf6\x1c\xc1\xb1\x10\xa4\x00\x07\xa2\x0e\xd2\x9e\xe0\xb7\x0d\x58\x8e\x07\xc0\x5d\x22\x05\x4b\x8e\x12\x4b\x5b\x86\xfe\xfa\xb5\x82\xf1\x0b\x99\x10\xcd\x00\x33\x41\x4c\x22\xf5\x2c\x73\x3b\x25\xcd\xf4\x9c\x75\x2c\x26\x2c\x2b\xc5\xa7\x96\x1a\x90\x65\xb1\x78\x7b\xb5\x98\x82\x62\x4b\x86\xfd\xf0\xaf\xb4\x23\x25\x69\x68\xf2\x64\x97\xb7\x8e\xe3\x9e\x74\x10\xe8\x2d\x4a\x10\x6e\xd0\x8d\xf6\x08\xbb\x1d\xe9\x2c\xde\x9f\xdb\x2c\x29\x6f\x8a\x70\x93\x07\x0f\xf9\xab\xb6\xaf\x7f\x5a\x7d\xff\xe6\xee\xdd\x1f\x9b\x71\xac\x27\x8d\x63\xdb\xae\xa1\x76\x98\x28\xa6\xd1\x44\x67\x84\x26\x9d\x6e\x86\xc3\x7a\xf6\x52\xef\x07\xdc\x52\x0c\x34\xc5\x75\xed\xe5\xa4\xf7\x84\xf6\x6f\xe5\x44\x13\x46\x69\xf0\x78\xe8\x4e\x3e\x5a\x43\xfd\xb3\x06\xff\xcb\x20\xc8\x88\xf1\x28\xd8\x92\x1d\xcf\x2d\x7d\xee\x4a\xfc\x6d\x12\x8a\x45\xb5\xe6\xdd\xfb\xcd\x89\x7c\x88\xa6\xd3\xb0\x63\x37\x0b\xd8\x04\xdf\xe5\x44\x3a\xd9\x68\x0d\xf5\x3e\xc4\x34\xbc\x2c\x11\x46\xeb\x59\x4c\x8e\xa4\x73\xc8\x0e\xd2\x94\xaf\xe7\x80\x0e\x63\xbc\x0f\x6a\x07\xc0\xef\xd3\xf3\xeb\x1f\x7e\x7c\xf3\xcd\x02\x0f\xe3\x58\xf2\xa7\x29\x70\x27\x52\x96\x23\x6e\x1d\x9d\xea\x18\xcc\x69\x4f\x92\xf8\x14\x6d\x3b\x74\x91\xe6\x62\x09\xdb\x38\xcd\x24\xe9\x59\x83\x94\xee\x5c\x43\x1d\x13\xb6\x2c\xed\xbf\x04\xe0\xb5\xf7\xb7\xd8\x1c\x48\xec\x29\x52\xbb\x10\x9c\xc1\x18\x43\xc3\x65\xf5\xf3\x8c\x1c\xdc\x7f\x9a\x70\x0d\x7c\xb8\x69\xe7\x67\x5c\x94\x4b\xa9\x74\x95\x9e\xff\x35\x96\x16\x6e\xb7\x8b\x00\x7d\xde\x05\xb6\x28\x11\xdb\x4b\x6a\x6e\xbb\x28\xe5\x4c\xd0\x05\xb4\x66\x8b\x0e\xa5\x21\x5d\x46\x96\x8b\xee\x58\xfd\x13\x00\x00\xff\xff\x21\x9e\x42\xa5\xdb\x08\x00\x00")

func templatesWeb_serverTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesWeb_serverTf,
		"templates/web_server.tf",
	)
}

func templatesWeb_serverTf() (*asset, error) {
	bytes, err := templatesWeb_serverTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/web_server.tf", size: 2267, mode: os.FileMode(480), modTime: time.Unix(1541058326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/db_mysql.tf": templatesDb_mysqlTf,
	"templates/jumpbox.tf": templatesJumpboxTf,
	"templates/load_balancer.tf": templatesLoad_balancerTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/provider.tf": templatesProviderTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage_account.tf": templatesStorage_accountTf,
	"templates/subnet.tf": templatesSubnetTf,
	"templates/vars.tf": templatesVarsTf,
	"templates/vmss.tf": templatesVmssTf,
	"templates/vnet.tf": templatesVnetTf,
	"templates/web_server.tf": templatesWeb_serverTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"db_mysql.tf": &bintree{templatesDb_mysqlTf, map[string]*bintree{}},
		"jumpbox.tf": &bintree{templatesJumpboxTf, map[string]*bintree{}},
		"load_balancer.tf": &bintree{templatesLoad_balancerTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"provider.tf": &bintree{templatesProviderTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage_account.tf": &bintree{templatesStorage_accountTf, map[string]*bintree{}},
		"subnet.tf": &bintree{templatesSubnetTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
		"vmss.tf": &bintree{templatesVmssTf, map[string]*bintree{}},
		"vnet.tf": &bintree{templatesVnetTf, map[string]*bintree{}},
		"web_server.tf": &bintree{templatesWeb_serverTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

