// Code generated by go-bindata.
// sources:
// templates/network.tf
// templates/output.tf
// templates/provider.tf
// templates/resource_group.tf
// templates/vars.tf
// DO NOT EDIT!

package webserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x91\xc1\x4e\x84\x30\x10\x86\xef\x7d\x8a\x49\xc3\x41\xe3\x8a\xe0\xc1\x78\xe1\x49\x36\x1b\xd2\xa5\xa3\xa9\x2e\x2d\x99\xb6\x2b\x91\xf4\xdd\x0d\x74\x31\x52\x76\x35\xc6\xab\x70\x62\xe6\x9f\xf9\xf9\xbf\x21\xb4\xc6\x53\x83\xc0\xc5\xbb\x27\xa4\xb6\x3e\x2a\x72\x5e\x1c\x6a\x8d\xee\xcd\xd0\x2b\x07\xfe\xa2\xb4\x34\x7e\xdd\x18\x18\x80\x16\x2d\x42\xf2\x54\xf3\x08\x67\x00\xb3\x41\xfd\x4c\xc6\x77\xf5\xa4\xaf\x80\x67\xc3\xec\xb7\x14\xe4\x27\xb3\xa4\x3a\x8e\x85\x71\x9d\x90\x92\xd0\xda\xda\x76\xa2\xc1\x4f\xbf\x2d\x2f\x8b\x7c\x7a\xef\xca\x07\xbe\x63\x00\x07\xd3\x08\xa7\x8c\x4e\xfe\x2b\x1b\x8e\x82\xf2\xb9\x19\x38\x0b\x8c\xad\x11\x58\xbf\xd7\xe8\xc6\xe4\xbe\xed\xf6\xa6\xbf\x1c\x75\xca\x7a\x12\x5d\x08\xfb\x97\xb4\x09\xf2\x33\xf4\x12\x45\x7e\xfe\x56\x6b\x7e\x1d\xe1\x93\xea\xbf\x82\x69\x94\xa4\x18\xfc\xea\x97\xcb\x17\x37\xd9\x16\xbb\x0d\x3c\x6e\xa0\xb8\xfe\x99\x6e\x5c\x17\xbf\xed\xf7\x90\xa3\xe8\x36\x1b\x1a\xe3\xb5\xcb\x95\x96\xd8\xc3\x0d\x94\xe1\x1f\xfb\x02\x7b\x82\x67\x3c\x02\x83\x58\x85\x0a\xee\x59\x60\x1f\x01\x00\x00\xff\xff\x6e\x38\x3c\x5b\xf2\x03\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 1010, mode: os.FileMode(480), modTime: time.Unix(1540903544, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcd\xc1\x4a\x03\x31\x10\xc6\xf1\x7b\x9e\x22\x04\x0f\x0a\xb2\xe0\xc5\x9b\xcf\x12\xd2\x66\xac\xa9\x9b\x99\x30\x99\x49\x8b\xa5\xef\x2e\x75\x59\x70\x77\x5d\x5d\xf0\x3a\xfc\xe7\xf7\x91\x4a\x51\xb1\x0e\xb0\x25\x26\xcc\x80\xe2\xec\xc5\x58\xdb\x42\xaf\x60\x5f\xac\xbb\xbb\xb4\xc0\x5d\xf8\x50\x06\xff\xad\xba\x3a\x73\x35\x66\x7c\x67\xa8\xa4\xbc\x07\x7f\x60\xd2\xe2\x31\x64\x58\x30\x5f\x04\x67\x3f\x6d\xbb\x63\xc2\x48\x3a\xbf\xde\x84\xe9\x44\x43\x90\xdf\xe1\x96\x58\x34\xf4\x1e\x41\x4e\xc4\xef\xa3\x3c\x3f\x2f\xe9\xaa\xbb\x3f\xf1\xa1\xe9\x8e\x9a\xcb\x8e\xce\x3f\x20\x09\x05\x18\x43\xef\xf7\x29\xf2\x56\x26\xc4\xc8\x50\xab\x2f\x0c\xaf\xe9\xbc\x02\x1e\x4e\x0b\xee\xb6\xf1\x46\x55\xee\x37\xb9\x8f\xf6\xe9\x61\xc5\x4e\xe5\xdf\xf6\xf3\x60\x7f\x06\x00\x00\xff\xff\x6f\x69\xf9\xcf\x4a\x02\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 586, mode: os.FileMode(480), modTime: time.Unix(1540863722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xc1\x0a\xc3\x20\x0c\x40\xef\x7e\x45\x90\x1d\x36\x18\xfb\x83\x7d\x4b\x71\x36\x87\xb0\x36\x4a\x8c\x1e\x56\xfc\xf7\x51\x0b\xb5\x14\x36\x8f\xbe\xf7\x92\x44\x09\x85\x46\x14\xb0\xee\x93\x05\x65\xb6\xb0\x18\x00\x3f\x11\xb2\x0e\x34\xc2\xf6\x9e\x60\x2f\x4b\x71\xf2\x68\xd6\xb0\xe3\x6a\xbb\x9c\xd0\x0b\xea\x4f\x79\xc3\x2d\x48\xf9\x95\xbc\x50\x54\x0a\xbc\xee\x38\x05\x27\xdc\x12\x45\x76\x7f\x0e\xda\x71\x93\x91\x0b\x49\xe0\x19\x59\xbb\x3c\x85\xf0\xce\xf1\xba\x36\x07\x9e\xee\xd0\xa7\x1c\xfe\x6f\xd5\x9a\x6a\xbe\x01\x00\x00\xff\xff\xcd\xed\xb3\xce\x1e\x01\x00\x00")

func templatesProviderTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderTf,
		"templates/provider.tf",
	)
}

func templatesProviderTf() (*asset, error) {
	bytes, err := templatesProviderTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider.tf", size: 286, mode: os.FileMode(480), modTime: time.Unix(1540903488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\x51\x0a\xc2\x40\x0c\x44\xff\xf7\x14\x43\xf0\xb7\xde\xc0\xb3\x2c\xa1\x46\x59\xb1\x49\x89\xa6\x88\x25\x77\x97\x52\x16\x11\xe7\xf3\xcd\xcc\x73\x79\x58\xf8\x28\x20\x7e\x87\x8b\x4f\xb5\x93\x7a\x75\x8b\x99\x40\xb7\xa6\x67\x8b\x3f\xbe\x16\x40\x79\x12\x6c\x39\x81\x0e\xeb\xc2\x7e\xfc\x5d\xd5\xd9\xe5\xd2\x5e\x39\xec\xa5\xe8\x52\xb7\x4b\x0e\xbb\x93\x0a\x70\xb7\x91\x9f\xcd\xf4\xab\xe8\x24\xa9\x64\xf9\x04\x00\x00\xff\xff\xdf\xe0\x6d\x2f\xa0\x00\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 160, mode: os.FileMode(480), modTime: time.Unix(1540903571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x4e\xeb\x30\x10\x85\xf7\x7e\x8a\x91\x1f\xe0\xde\xdb\xbb\x60\x97\x05\xea\xa2\x0f\x80\x58\x21\x64\x4d\x9d\x69\x18\x70\x6c\x6b\xc6\x0e\x3f\x55\xdf\x1d\x25\x2d\x90\xb4\x40\xb2\x1a\x9f\xcf\xc7\xe7\xcc\x80\xc2\xb8\x0d\x04\x96\xe2\xe0\x22\xf6\x64\x61\x7f\x30\x66\x71\xce\x92\x62\x4f\xb1\xa8\x85\xbd\x01\x28\xaf\x99\xa0\x01\xdb\x63\xb6\x06\xa0\xa5\x1d\xd6\x50\xa0\x99\x44\x80\xeb\xb7\x2a\xb4\x0e\xa9\xb6\x70\xfa\x1a\xb0\xb9\x6e\x03\x7b\xfb\x05\xdc\xde\x6c\xd2\x40\x32\xf9\x8e\x40\xd5\xee\x73\x9e\x61\x1b\x92\x1e\xe3\xc9\xad\x01\xdb\x4d\xf3\x0c\x58\x3f\x70\xc4\x8f\xd7\x1a\xb0\x7e\x9c\x47\xfd\x60\x16\x35\x70\x84\xdd\xac\xcc\x79\xcf\x23\x50\x28\x62\x2c\x8e\xdb\xef\x65\xad\x5b\xf5\xc2\xb9\x70\x8a\x3f\x42\x3e\x30\xfd\xe2\x71\x92\x95\xbc\xd0\x45\x0a\x21\x4d\x55\x3c\xb9\x4e\x52\xcd\x2e\x0b\xed\xf8\x65\xb6\xf6\x63\x49\x2d\xc2\xb1\x5b\x2e\xdf\xda\x65\xe1\x90\x3c\x8e\x31\x8f\x97\x67\x1c\xa1\x96\xaa\xff\xcf\xf0\x47\x8e\x6d\xaa\x6e\x60\x29\x15\x83\x8b\x54\x9e\x93\x3c\x39\x6c\x5b\x21\x55\xa7\x19\x3d\x5d\xe4\x08\xac\x65\x99\xe2\xce\xae\xfe\xfd\x99\xfe\xbf\xab\x2b\x7b\x6f\x0e\xe6\x3d\x00\x00\xff\xff\x9f\x9d\x7e\xe1\x62\x02\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 610, mode: os.FileMode(480), modTime: time.Unix(1540863722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/network.tf": templatesNetworkTf,
	"templates/output.tf": templatesOutputTf,
	"templates/provider.tf": templatesProviderTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"provider.tf": &bintree{templatesProviderTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

