// Code generated by go-bindata.
// sources:
// templates/credentials.tfvars
// templates/db_mysql.tf
// templates/devbox.tf
// templates/load_balancer.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/provider.tf
// templates/resource_group.tf
// templates/storage_account.tf
// templates/subnet.tf
// templates/vars.tf
// templates/vmss.tf
// templates/vnet.tf
// DO NOT EDIT!

package webserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCredentialsTfvars = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\xae\xdc\x20\x0c\x86\xf7\x91\x72\x87\x94\xbd\xa5\x40\x48\x20\x8b\xb7\xa8\xda\x1b\xbc\x03\x20\x1b\x9c\x2a\x6a\x06\x46\x40\x32\xd2\x9c\xbe\x4a\x54\x4d\xa7\x6f\xcb\xff\x7f\x7c\xb6\xf1\xb9\x67\x76\x7e\x5b\x39\x56\xb7\x86\xee\xa3\x13\xbd\x34\x52\x4b\xd4\x40\x23\x21\x68\xf6\x0c\x34\x4d\x16\x94\x54\x93\xb4\x1a\xad\x5d\x48\xb4\xcd\x7f\x64\x61\x9f\xb9\x9e\xf4\xcc\x96\xb5\x9c\x2d\x78\xcb\x03\xe8\x81\x10\xc8\xf8\x11\x8c\x0c\xca\x5a\x6d\x06\x3f\xd8\x17\xcd\xf1\x58\x73\x8a\x37\x8e\x17\xfb\xfd\x7c\xfc\xb1\xa5\x3d\xbc\x1a\x65\xa7\xe2\xf3\x7a\xaf\x6b\x8a\x7f\xe7\xf3\x7a\x54\x36\xcc\x0c\x7e\x9e\x11\xb4\x25\x02\x92\x2a\xc0\x12\x58\x49\x33\xa1\x1e\xe8\x9f\xa1\x72\xc4\xd7\x66\x46\x2d\xb3\xb5\xb4\x80\x9d\x16\x09\x5a\xe2\x02\xb3\x44\x02\x15\x8c\x0f\xbd\x94\x81\xb4\x11\x6d\xc3\xf1\x70\x11\x6f\x7c\x22\x35\x95\xb5\x2e\x95\x4b\x15\x6d\xd3\x36\x3e\x65\x2e\xdd\x47\xa7\xda\x26\x60\x45\xc2\xc2\x6e\x2f\x9c\xdf\xeb\xe2\x2d\xbb\x63\x29\x8f\x94\x2f\x3b\x92\x0f\x52\x0d\xfa\x9b\x68\x9b\x52\x53\xc6\x5f\x27\x32\xf6\xfd\xf9\xf1\x83\xc9\x15\xce\x07\x67\x77\xdc\x9c\x4f\xfb\x75\x11\xf5\x35\x28\xeb\xf3\xf2\x7c\x56\x8c\x01\x73\x70\x3f\x3f\x95\x3b\x94\x68\x9b\x2d\x61\x70\x84\x1b\x46\xcf\xd9\x95\xdf\xfb\x7b\x4d\xfc\x09\x00\x00\xff\xff\x6f\xee\x09\x63\xe7\x01\x00\x00")

func templatesCredentialsTfvarsBytes() ([]byte, error) {
	return bindataRead(
		_templatesCredentialsTfvars,
		"templates/credentials.tfvars",
	)
}

func templatesCredentialsTfvars() (*asset, error) {
	bytes, err := templatesCredentialsTfvarsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/credentials.tfvars", size: 487, mode: os.FileMode(480), modTime: time.Unix(1541041292, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDb_mysqlTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x4d\x8e\xdb\x30\x0c\x85\xf7\x06\x7c\x07\x41\xe8\xaa\x8b\xa0\x7f\x41\x57\xd9\xb5\x98\xed\xdc\x40\xa0\x2d\xc6\x50\x47\xa6\x5c\x52\x72\x91\x06\xb9\x7b\x21\xcb\x1a\x67\x26\x46\xbd\x24\xdf\xc7\xf7\x64\x51\x33\xb0\x83\xce\xa3\xd2\x48\x83\x23\x34\x33\xb2\xb8\x40\x5a\x5d\xdb\x46\x29\x8b\x67\x48\x3e\xaa\x93\xd2\xc7\xc3\x77\xdd\x36\xb7\xb6\x69\x9b\x0d\xea\x03\xa3\x68\x75\x7d\x57\x96\x18\x18\x06\x7c\x6c\x74\xd0\xbf\xa4\xc9\x30\x46\xa4\xe8\x02\x19\x0b\x17\x79\xf0\xfa\x7a\x7c\x30\xb2\x10\xa1\x03\x41\x93\x04\x99\x60\xdc\x99\xfd\x2a\x99\x40\xe4\x4f\x60\x5b\x25\x8c\x12\x12\xf7\xa8\x34\xfc\x4d\x8c\x3c\x9a\xf1\x22\xbf\xbd\x11\xe4\x19\x59\x2b\x6d\xbb\x52\x59\x83\xe4\xf1\x6a\xf7\x3b\x29\xfd\xe1\x3a\x03\x1f\x90\x66\x93\x65\x37\x9d\x81\x6a\x60\x06\x0e\x69\x32\x77\xfc\x02\x54\xd7\xb7\xb2\xc3\x2f\x47\x36\xa4\xf7\xd5\x6d\xaa\x0f\x3d\xe4\x7f\xf4\x9f\x18\x55\x92\x81\x8c\xc8\x4b\x2a\x47\x58\x0f\x71\x52\xfa\xe9\xd9\x3c\x21\x1d\x4d\x01\x96\xfb\x2a\xe3\x95\xea\x61\x82\xde\xc5\xcb\x36\xef\x4d\x3b\x3a\xe4\x65\x02\x12\x32\xf8\xe7\xc4\x53\x10\x5c\x9b\x67\x18\x9d\xbf\xac\xed\xe3\x52\xbc\xad\x19\xca\xdd\x9b\x89\xc3\xd9\x79\xac\x79\x6a\x79\xec\x36\xbb\xb5\xa6\x3e\xaa\xcf\x9f\xbe\x7c\xab\xbe\xbb\x3b\xb2\x41\xbb\xed\xca\x0e\x18\x0c\xa3\x4d\x64\x81\xa2\x29\xd2\x8c\xfe\x70\x92\x97\xc4\xde\x07\x05\x3b\x3a\x72\x12\x19\x62\x60\xe3\xc3\xe0\x68\x73\x79\xd8\xb7\xe2\xb0\xc3\xbc\xae\xdb\x0e\x5c\x5b\x05\x5e\x9f\xd6\xfd\x16\xdd\x3f\xb9\x22\x12\xf1\x06\xe9\x1c\xb8\xc7\x11\x69\x79\x79\x3f\xa9\x66\xbf\xb5\xcd\xbf\x00\x00\x00\xff\xff\xb7\x32\xa0\x3b\xb1\x03\x00\x00")

func templatesDb_mysqlTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesDb_mysqlTf,
		"templates/db_mysql.tf",
	)
}

func templatesDb_mysqlTf() (*asset, error) {
	bytes, err := templatesDb_mysqlTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db_mysql.tf", size: 945, mode: os.FileMode(480), modTime: time.Unix(1541041168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDevboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4b\x6f\xe3\x38\x0c\xbe\x07\xc8\x7f\xd0\x7a\xf7\xda\x60\xdb\x2d\xf6\x96\x53\x17\x0b\x0c\xd0\xc1\x0c\x9a\x79\x1c\x06\x03\x81\xb1\x68\x87\x13\x9b\x32\x28\xc9\x7d\x21\xff\x7d\x20\xf9\xd1\xa4\x79\x74\x1e\x68\x0e\x81\x61\x91\x1f\xc9\x4f\xdf\x47\x0b\x3a\x1b\x24\x47\x95\xc1\x43\x10\x94\x5a\x37\x61\x59\x51\xae\xa9\xc9\x54\xf6\x8d\xd8\xd8\xa0\x0d\xb6\x4b\x7b\xb7\x7d\xf2\x38\x9d\x28\xc5\x50\xa3\x3a\xf6\x9b\x1f\xcf\x8e\xb9\x95\xcd\xc1\x93\xe5\x63\xb9\x7f\x3d\x0e\xfd\x0c\x1d\xea\x52\x6c\x68\x66\x3d\xe8\xb3\xb7\x03\xdc\x26\x81\xef\x1e\xea\xdd\x3e\x7f\x1e\x3c\xe6\x77\xc0\xe3\x0c\x1a\x8c\x11\x74\x4e\x43\x35\x4e\x32\x57\x99\xf3\xe0\x29\xcf\xa6\x93\xcd\x74\x32\x9d\xec\x73\xcb\xe8\x6f\xad\xac\x35\xb1\x47\x29\x20\xc7\x3d\x8e\x99\xf2\x13\xec\xa6\xde\x5b\x90\x19\x72\x9b\xc6\xda\x9c\x75\x79\x67\x9c\xca\x1e\xe6\xf5\x35\xe8\xfc\x75\x16\x23\x22\x35\x3a\xb7\x5c\x50\x19\xa4\xeb\x36\x4d\xfc\x82\xa2\x4e\x4f\xdf\xeb\x4a\x29\x17\x96\x8c\x5e\x93\x79\x59\x5a\x5d\xe8\xcc\x01\x0f\x8f\x64\x36\x3d\x4c\x23\xd4\x82\xc7\xe3\x77\x6d\xee\x19\xea\x9e\xf5\x43\xca\xd8\x6e\x60\xa7\xea\x18\x3a\x3b\x62\x90\xb1\x8b\xcd\x51\x21\xb5\x24\x3e\x40\xa5\x6b\xc8\x57\xc4\x7b\x32\x3a\x69\xd0\x03\x34\x76\xc9\x3d\x9b\x27\xfc\xf9\x3a\xc6\xfc\x1d\x47\xee\x39\x4a\x93\x71\x6a\xae\xbe\x6c\x41\xee\xc5\xcc\xf6\x3c\x97\x28\xff\x1a\x01\xdb\x5a\x3b\x7a\x78\x4e\xdb\x5c\x65\x0b\x0f\x6c\x40\x8c\xfe\x6f\x71\xa1\xdb\x8b\xa4\xe4\x98\xf0\xa7\xba\xb2\x75\x8d\xec\x95\x5f\x91\x53\x15\x31\x2a\x6f\xd5\x1a\xb1\x51\x7e\x85\xea\xdd\x42\x19\x72\x6b\x05\x85\x47\x51\x06\x2b\xf4\xc4\x65\x3a\xfa\xf4\x36\x02\xa4\x57\xa8\xad\xd3\x31\x4e\x5b\xd6\x1e\xa5\x26\x1e\x94\xe6\x25\xe0\x8f\x95\x32\xe0\x21\x15\x73\x2f\x56\x8b\xa1\xa9\x9e\x3b\x55\xd0\x79\x2b\x50\xa2\xa6\x3a\xfe\x0b\x16\x28\xc8\x39\x0e\x76\x4d\x8a\x75\x2b\x94\xc8\xcf\x15\xb0\x65\xca\xa1\xea\x1d\x61\x8b\x02\x65\x20\xef\xe3\x32\xb0\x0f\x0b\x94\x16\x65\xf0\xe9\x3a\x3c\x91\x7b\xfe\xef\xec\xef\xcb\xb3\xeb\x0f\x8b\xfe\xb0\x45\x71\x9d\xfa\xe6\x2a\xab\xc0\xa3\xf3\x83\x23\xb6\xfb\xea\x39\x3b\xbe\x3e\xc6\xaf\x50\x77\xd5\x31\xb8\xaf\x90\x27\xe7\x94\xbb\xb1\x37\x08\xe6\xb3\x90\xc7\x21\x48\x30\xee\x00\xdb\x8c\x56\x98\xab\xec\x7f\xb1\xf5\x9b\x48\x48\x1f\x54\x03\x43\x89\xa6\xbb\x3d\x7f\xdf\xe0\x8e\x5a\xae\x6f\x16\xdb\x9d\x5b\xa7\x1b\xb1\x05\x55\x23\x89\xb9\xad\x9b\xe0\x51\x7a\x37\xc4\xcd\xf2\x64\x43\xa5\xc0\xd4\xc4\x3a\x38\x94\x61\xef\x46\x32\xd2\xdb\x9d\x88\x06\x9c\xbb\xb5\x62\x62\xc4\xfb\xfe\xf9\xfc\xe2\x9f\xcb\x3f\x0e\x57\xd7\x15\x71\xb8\xeb\xb7\xf0\xd0\x8a\x21\x07\xcb\x0a\x47\x2c\x0d\xc1\xaf\x90\x3d\x8d\x5b\xaf\x80\xca\xe1\x16\xa0\x87\xd2\x0d\xd9\xc8\x2d\x89\xe5\xa4\xcf\xee\x5b\x58\x12\x97\x5b\x8b\xec\x7b\x00\x00\x00\xff\xff\xd0\xc5\x77\xc7\x6c\x08\x00\x00")

func templatesDevboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesDevboxTf,
		"templates/devbox.tf",
	)
}

func templatesDevboxTf() (*asset, error) {
	bytes, err := templatesDevboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/devbox.tf", size: 2156, mode: os.FileMode(480), modTime: time.Unix(1540975455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLoad_balancerTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\x3f\x8f\x1b\x21\x10\xc5\x7b\x4b\xfe\x0e\x08\xa5\x5d\x27\x65\x1a\x17\x39\x29\x52\x22\xa5\xb0\xa2\xf4\x88\x05\xce\x47\x96\x63\x08\x7f\x5c\xc4\xda\xef\x1e\x01\xcb\xde\xad\x17\x56\x4a\x4e\x2e\xe2\xd2\xcc\xbe\x99\xf7\x7b\x30\x56\x38\x08\x96\x09\x84\xe9\xef\x60\x85\x7d\x26\x26\xf4\x4a\x32\x22\x0d\x46\xf8\xa7\xd4\x1c\x02\x51\x40\x39\xe9\xa9\xa2\x9a\x09\x9b\x4e\xae\xfb\x1d\x42\x9a\x3e\x0b\xd4\xfa\x1d\x11\x7e\x77\xbd\x50\x7b\x10\xfa\x42\x62\xe5\xd8\x45\x99\xae\xc8\x74\xd2\xe0\x28\xa2\x80\x51\x2f\x41\xb7\x45\xca\x60\x65\x54\x72\xb6\x10\xcc\x61\x9a\xed\xe6\xdf\x22\x37\x26\xf1\xe5\x21\x59\x0e\xfc\xf7\xe2\xc9\x46\x12\x9e\x21\x11\xca\xb9\x15\xce\x11\xaa\x66\x27\x47\x84\x9d\xa7\x5e\xb2\x54\xea\x86\xd0\x84\xf4\x42\x69\x89\xd8\x0d\x21\xf6\x19\xf7\xbb\xfd\x6e\x9d\x90\xea\x1b\xd1\x6c\xe4\x52\x8b\xa3\x6f\x06\x70\x0f\xee\x6f\xc1\x5d\x63\xb8\x8d\x0e\xa1\x47\x0b\xda\x0b\xcd\x63\x48\x0c\xf4\xa3\x3c\x07\x9b\x8d\x26\x48\x8d\xeb\x7b\x44\xf8\x94\xb2\xfd\x7a\xfa\x94\x93\xc5\xb9\x7a\x9d\xb8\xe4\x4b\x4f\x73\xc5\xa1\xf1\x6c\x0e\x92\xe7\xd1\xc6\x8d\x68\x49\x4f\xd9\x10\xc7\x2e\x6d\x0c\x80\x6a\x3d\xc5\x7a\xed\xf5\x1e\x11\xc4\xc6\x2f\x5e\xf8\xfa\x9a\xa8\xbe\xea\x7b\x36\xdd\xb8\x95\x0f\x94\x0d\x9f\x35\x9f\x60\x9f\xa2\x81\x2d\x3a\xc6\x42\x2f\x5a\x38\xa6\xc3\xff\xca\xff\x93\xf7\xa6\x73\xc2\x5e\xa4\x3e\x77\xd9\x40\x5a\x30\x16\x3c\x30\x50\x37\xd5\x5f\xbc\x37\xd3\x0b\xfb\x15\x84\xf3\xc4\x50\xff\xf4\xea\xfc\x7d\xfe\x18\xac\x5f\xb7\xfa\xf8\x61\x0b\xac\x0d\x2a\x71\x85\x0a\xd7\x7c\xd6\xc4\xfa\xa6\xc5\xb1\x4d\xb8\x25\xfd\x2f\xb0\x97\x5a\xdf\x1e\xbe\x47\x57\x2d\xd6\xcb\xe2\x1f\xcc\x2c\x77\x4a\x8d\x70\x61\x8c\x50\x79\x96\xf5\xaa\xb9\xac\xb9\xa1\xe6\xdb\x5a\x5b\x45\xb5\x37\xff\x0a\xd7\x0d\xa6\xea\x8a\xa8\x2f\xa8\x6a\x65\x01\x9a\x6e\x66\x25\x95\x46\xd7\x54\x5e\x6f\x93\x8f\xb2\xee\xf8\x27\x00\x00\xff\xff\x48\x10\x7a\xe7\x7f\x08\x00\x00")

func templatesLoad_balancerTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoad_balancerTf,
		"templates/load_balancer.tf",
	)
}

func templatesLoad_balancerTf() (*asset, error) {
	bytes, err := templatesLoad_balancerTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/load_balancer.tf", size: 2175, mode: os.FileMode(480), modTime: time.Unix(1541040593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x31\x6f\x83\x30\x10\x85\x77\x24\xfe\x83\x65\x75\xaa\x14\x44\xb7\x2e\x19\xba\xb5\x7b\x77\xcb\xb5\xaf\xc8\x2d\xb9\x43\x67\x3b\x69\x1b\xf1\xdf\x2b\x0c\x34\x09\x01\x54\x85\x91\xfb\xf4\xee\xdd\xe3\xc1\xe0\x29\xb2\x01\x21\xf5\x4f\x64\xe0\x9d\x42\x08\x07\xe2\x4f\xe5\xc1\x44\x76\xe1\x5b\x55\x4c\xb1\x91\x42\x7e\x38\xb4\x14\x17\xe7\xc7\x3c\x13\x02\xf5\x0e\xc4\xe4\xd9\x0a\x79\x77\xdc\x6b\x2e\x00\xf7\xaa\x03\xda\x0d\xfa\x4a\x76\x78\x4d\x46\x07\x47\x78\x85\x8f\x66\x46\x7b\xfd\x92\x62\xb0\x30\x79\x3b\xaa\xb4\x49\xf3\x72\x98\x16\xde\xa0\x99\x7c\xca\x3c\x6b\xf3\x2c\xcf\xfe\x11\x12\xc7\x1a\x56\x32\xea\xc7\x8b\x11\x9d\xdd\xfe\x54\xd7\x74\xd8\x3c\x87\xd0\xa4\x6b\x1a\x76\xd4\x29\xcc\xd3\x0f\x65\xd9\x41\xd6\x31\x98\x69\x8e\x27\xc9\x17\x7c\xa3\x88\x36\xe9\x69\x63\xc0\xfb\xf5\xed\xc3\x62\x0a\x64\xa8\x5e\x00\x5f\x4d\xef\x6f\x08\xad\x21\x0e\x8a\x35\x56\x70\x89\xdd\x27\xc8\x82\x0f\x0e\xd3\x37\xba\x22\xb7\x42\x3e\x96\xe7\x52\xda\x5a\x06\xef\x55\xc3\xf0\xee\xbe\xd6\xa4\xa6\xe4\x1f\x34\x57\x81\xdb\xeb\x35\x56\x41\x88\xf9\xea\xcf\x54\x6c\x1e\x2c\x56\xff\xa0\x53\xe5\x7e\x03\x00\x00\xff\xff\xf1\x34\x4e\x3c\x94\x03\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 916, mode: os.FileMode(480), modTime: time.Unix(1541040927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\x41\xaa\xc2\x40\x0c\xc6\xf1\xfd\xc0\xdc\x21\x0c\x6f\xdd\x1b\xbc\xb3\x0c\x41\x83\x8c\x76\x92\x12\x93\x08\x96\xde\x5d\x14\x0a\xb5\x5d\xb8\xfd\xf8\xf3\xfb\xc4\x6d\x72\x83\x42\x1c\x4d\x85\x3b\xb1\x15\x98\x73\x02\x08\x1c\x9d\xe0\x1f\xca\xdf\x1c\xa8\x03\x3e\x5d\xa9\x6e\xb2\xa5\xe4\xb4\xe4\x94\xd3\x4a\x28\xdd\xc5\xf5\x44\xf5\xa2\xe2\x53\x65\xec\x74\xa4\x3e\x8c\xf6\xfa\x1d\x0f\xd7\xc6\x67\xf1\xfd\xfa\x26\x0e\x37\xc1\x64\x3f\xf0\x68\x6a\x8e\x63\x65\xb2\x87\xe8\x6d\xd5\xf7\xf3\x86\x7f\x05\x00\x00\xff\xff\x7c\xc3\xf4\x1a\x07\x01\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 263, mode: os.FileMode(480), modTime: time.Unix(1540954255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesProviderTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x4d\x0a\xc2\x30\x10\x46\xf7\x85\xde\x61\x08\x2e\x14\xc4\x1b\x78\x96\x12\xd3\x59\x0c\xb6\x93\x30\xf9\x59\x58\x7a\x77\x89\x03\x6d\x28\xd8\x2c\xf3\xde\xfb\x92\x20\xbe\xd0\x88\x02\xc6\x7e\xb2\xa0\xcc\x06\x96\xbe\x03\x70\x13\x21\xa7\x81\x46\xd0\xf3\x04\x73\x59\x8a\x95\xc7\x4f\x1b\x36\xbc\x9a\xc6\x8e\xe8\x04\xd3\x5f\x5b\xb1\x16\x31\xbf\xa2\x13\x0a\x89\x3c\xd7\x57\x0e\xc5\x01\x6b\x93\x90\xed\xc9\x9f\x36\xac\x36\x72\x21\xf1\x3c\x23\xa7\xdd\x9e\xbc\x7f\xe7\x70\xad\x51\xc3\xe3\x1d\xf6\x99\xe6\xfe\x56\x97\xd6\xbe\xfb\x06\x00\x00\xff\xff\xef\x23\x20\x1a\x25\x01\x00\x00")

func templatesProviderTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesProviderTf,
		"templates/provider.tf",
	)
}

func templatesProviderTf() (*asset, error) {
	bytes, err := templatesProviderTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/provider.tf", size: 293, mode: os.FileMode(480), modTime: time.Unix(1540954243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4a\x2d\xce\x2f\x2d\x4a\x4e\x55\x50\x4a\xac\x2a\x2d\x4a\x2d\xca\x8d\x87\x89\xc4\xa7\x17\xe5\x97\x16\x28\x29\x28\x65\x65\xe6\xa5\xe4\x97\x62\x88\x57\xf3\x72\x29\x28\xe4\x25\xe6\xa6\x2a\x80\x80\xad\x82\x92\x4a\x75\x59\x62\x91\x5e\x6a\x5e\x59\x3c\x48\xb4\x56\x17\xa2\x4f\x09\xa4\x2c\x27\x3f\x39\xb1\x24\x33\x3f\x0f\xa1\x0c\x26\x52\xab\xc4\xcb\x55\xcb\xcb\x05\x08\x00\x00\xff\xff\xca\x97\x33\xb8\x87\x00\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 135, mode: os.FileMode(480), modTime: time.Unix(1540954255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorage_accountTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\x51\x4e\xc3\x30\x0c\x06\xe0\xf7\x49\xbb\x43\x14\xf1\x00\xd2\xd8\x0d\x76\x03\x9e\xd8\x01\x2c\x37\x75\x47\x20\xb3\x23\xd7\x99\x54\xa6\xdd\x1d\xa5\xa5\x68\x65\x43\xf4\xb1\xf9\xfc\xe7\x77\x94\x7a\x29\x1a\xc8\x79\xfc\x2c\x4a\x7a\x84\xde\x44\xf1\x40\x80\x21\x48\x61\xf3\xce\xb7\xd4\x61\x49\x76\x7b\x72\x5e\xaf\x9c\x63\x3c\x92\xbb\xfb\xed\x9c\x7f\x38\x2b\xe5\x84\x81\x1e\x4f\xa8\x5b\xe2\x13\x54\xbe\x71\xfe\xd9\x6f\x9c\xf7\x4f\x17\x5f\x23\xe6\x12\x70\x50\x29\x19\xae\x12\xc7\x88\xb9\xd9\x92\x6d\xdf\x23\xb7\x52\x7e\xff\xad\xc3\x53\x6a\x92\x80\x16\x85\xff\x28\x56\x0b\xcd\x64\x1a\xf8\xde\x0b\x3e\x22\xb7\x37\x03\xfb\x69\xf9\x05\xb4\x48\x7a\x07\x22\xb7\xa8\xed\x42\xd6\x57\x88\xd3\x5d\x60\x43\xa6\x51\xbe\xbc\xee\x47\x44\x8c\x4d\x22\x68\x92\x34\x40\x1c\x74\xc8\x73\xed\x9d\x33\x2d\x74\x65\xba\x98\xe8\x3f\xf3\x66\x96\x7b\x30\xc5\xae\x8b\x01\x84\xd3\xf0\x63\x2e\xeb\xd5\x57\x00\x00\x00\xff\xff\x78\xe7\x51\xc9\xf1\x01\x00\x00")

func templatesStorage_accountTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorage_accountTf,
		"templates/storage_account.tf",
	)
}

func templatesStorage_accountTf() (*asset, error) {
	bytes, err := templatesStorage_accountTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage_account.tf", size: 497, mode: os.FileMode(480), modTime: time.Unix(1540954255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSubnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x4d\x6e\x84\x30\x0c\x85\xf7\x48\xdc\xc1\x8a\x66\xd1\x4a\x53\x34\xcb\x6e\xe6\x24\x55\x15\xa5\x89\x3b\x72\xdb\x49\x90\x9d\xf4\x0f\x71\xf7\x0a\x42\x06\x81\x60\x51\x76\xd8\xcf\xdf\x8b\x9f\x19\x25\x24\xb6\x08\xca\xfc\x26\x46\xbe\x6a\x49\x2f\x1e\xa3\x02\x25\xc6\xdf\x7e\xba\xba\x02\xf0\xe6\x8a\xb0\xfe\xce\xa3\xf0\x61\x12\x0e\xb2\x82\xd4\x17\x0e\xa9\xd5\x79\xea\x0c\xea\xd0\x15\x8b\xa5\xa2\x79\x23\xef\x42\x5a\x57\x87\xb9\x7e\x04\x7e\x12\xc7\x64\x3e\xb4\xc7\xf8\x15\xf8\x3d\x13\x17\xc0\x95\xa2\x10\xd7\xe5\x19\x69\x9c\x63\x14\xd1\x2d\xe3\x2b\x7d\xcf\xab\x1c\x3a\x4b\x8e\xf3\x32\x77\xff\xa4\x17\xa6\xb4\xc6\xe2\xd3\xe9\xf9\x08\x8f\x47\x38\xdd\x0f\x86\x7d\x5d\xd5\xd5\x5e\xd4\xb7\xbd\x04\x6d\x62\x8a\x3f\x53\x70\x46\x24\x58\x32\x91\x82\x57\xa0\x26\x53\x2f\x97\x65\x63\xbc\xcc\x04\x22\xb7\x75\x9e\x39\xa6\x2c\x6b\xe6\xc3\x36\xe4\x72\x1e\x3b\x4f\x20\xb7\x04\x6c\xcb\x4a\x20\x3b\xdd\xec\xd1\xd7\xd5\x5f\x00\x00\x00\xff\xff\xac\x5f\x17\x58\x6c\x02\x00\x00")

func templatesSubnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSubnetTf,
		"templates/subnet.tf",
	)
}

func templatesSubnetTf() (*asset, error) {
	bytes, err := templatesSubnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/subnet.tf", size: 620, mode: os.FileMode(480), modTime: time.Unix(1541040910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4d\x4e\xc3\x30\x10\x85\xf7\x91\x72\x07\xcb\x07\x00\x5a\x24\x76\x59\xa0\x22\xf5\x00\x15\x2b\x84\xac\x89\x3d\x14\x53\xc7\x8e\x66\xec\x54\xb4\xea\xdd\x51\x7e\x00\x97\x94\x26\xab\xa7\xf9\x32\x2f\xef\x4d\x07\x64\xa1\x76\x28\x24\xfa\x4e\x79\x68\x50\x8a\xe3\xa9\x2c\xca\xe2\x6c\x62\x29\xf8\x06\x7d\x64\x29\x8e\x65\x21\x44\xfc\x6c\x51\x54\x42\x36\xd0\xca\x5e\x1b\x7c\x83\xe4\xa2\xa8\xc6\xb1\x10\x8f\x87\x44\xb8\x72\x21\x19\x31\x3d\x95\x90\x6d\xaa\x9d\xd5\x32\x23\x9e\x37\xeb\xd0\x21\x0d\xbb\x7b\x22\xf1\xf6\x47\xe7\xdc\x1a\xa9\x01\x3f\xed\xab\x84\xdc\x0e\x3a\x27\x56\xef\xd6\xc3\xb7\x61\x25\xa4\xee\xf5\x00\x9c\xca\xe2\x94\xc7\x81\x1e\x57\x59\xa8\x79\xe2\x11\x89\xe8\xc1\x47\x65\xcd\x7f\x00\xa7\x9a\x35\xd9\x36\xda\xe0\xaf\x60\xda\x59\xbc\xba\x67\x02\x18\x35\xe1\x85\xbf\x71\x41\x43\x6f\x31\x75\xff\xdb\xb5\x44\xe0\x98\x78\x29\x87\x84\xf9\x27\x1f\xd6\x9b\x90\x54\x67\x29\x26\x70\xca\x63\xdc\x07\xda\x29\x30\x86\x90\x59\x71\x0b\x1a\xf3\x53\x8e\x9d\x39\xcb\xf1\xcf\x39\x5f\xe4\xe2\xee\x66\x78\x6f\x17\x0f\xf2\x75\x66\xb4\xc7\x5a\x31\x52\x87\xa4\xba\x46\xe9\x90\x2e\xd5\x79\x0e\xb1\x3d\xe0\x3c\xca\x26\x82\x37\x40\x46\x3d\x2d\x59\x75\xf7\xf3\x48\x2e\x80\x51\x35\x38\xf0\x1a\x49\xf1\x2e\x8d\x3e\x5f\x01\x00\x00\xff\xff\x4e\x3e\x66\xd1\xc1\x02\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 705, mode: os.FileMode(480), modTime: time.Unix(1540974141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVmssTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xc1\x8e\xdb\x36\x10\xbd\x2f\xb0\xff\x40\x08\xbd\xae\x61\x6f\x93\x02\x3d\xe8\x50\x14\x2d\x10\x20\x05\x16\xd9\x14\x3d\x14\x05\x31\x22\xc7\x5e\x76\x29\x92\x18\x92\xda\x38\x81\xff\x3d\x20\x45\xda\x92\xac\x64\x0f\xd1\xc9\xe6\xbc\x79\xf3\x86\x33\x9a\x11\xa1\xb7\x91\x04\xb2\x06\x3e\x47\x42\xea\xb9\xee\xb8\x81\xc0\x9d\xb5\xba\x61\xcd\xff\xca\x48\x1b\xf9\xd0\x7b\x3f\x39\xfe\x72\x7b\xc3\x58\x75\xe5\x07\xb2\xd1\x71\x03\x3d\xb2\xc9\xd3\xb2\xe6\xa7\x2f\x95\x74\x8e\xdd\x14\xd6\xc5\x69\x62\x38\x35\x89\x7a\xc9\xb5\x78\xda\xaa\xeb\xce\xfb\xa7\xec\xa0\x2d\xc8\x0e\x34\x18\x81\xc4\x95\x5c\x71\xb8\x68\xd1\x5d\x8d\x9f\xbc\x78\x75\xdb\x28\x39\x06\x77\x64\x83\x15\x56\x7f\x3b\xf8\x47\xe1\x32\x72\x4f\xd6\x04\x34\x92\x3b\x4b\x81\xfb\x00\x14\xe6\xc8\xb7\xdb\xed\x76\x7b\x8d\x44\x23\x97\x9c\x6f\xb7\xbb\xdd\xaf\x09\xd9\x81\x78\xae\xc0\xd5\xe8\xf7\xf7\x33\x42\xe5\xb8\xb0\x66\xaf\x0e\x91\x20\x28\x6b\xc6\x3a\xb4\xac\x79\x88\x9d\x56\xe2\xdd\xc3\x6f\x52\x12\x7a\xdf\xdc\xde\x9c\x6e\x6f\x6e\x6f\xae\x0b\x3e\x28\x0a\x11\x34\xef\x41\x3c\x29\x83\xdc\x0b\xd0\xc8\x3d\x86\x79\xf9\x4b\xd5\xd7\x4a\xd3\xb2\xa6\x3f\x06\xf4\x21\xbb\x7a\x0c\x77\xbb\x52\x15\x91\x35\xfd\x58\x5b\x54\x96\xb1\x3a\x6b\x5d\xf7\x23\xad\x16\xdd\x81\x40\x22\x77\x56\x2b\x71\xe4\xbd\x95\x99\xef\x2f\x30\x11\x74\x93\x6e\x8c\x31\xff\x1c\xc7\xe4\x27\xe9\xe7\x98\x03\xd0\xe6\x05\x3b\xee\x91\x06\x24\x3e\xf4\xdc\xab\xcf\x85\x98\xb1\xa0\x90\x2a\xf6\x31\x80\x91\x40\xb2\x98\x04\x38\x10\x2a\x1c\xbf\x45\x23\x6c\x34\x61\xe4\x39\x15\x0d\xc1\x12\x1c\x90\x3b\xb2\x7b\xa5\x91\xab\x3e\xfd\x23\xdc\x23\xa1\x11\x58\xf5\xb9\x54\x75\xff\x84\x94\x98\x7f\x07\x63\x8d\x12\x39\x8f\x64\xb4\xfb\xfd\x45\xd1\xdf\x5d\x34\x21\x3e\xe6\x90\xc5\x9e\xf2\x3c\x57\x69\xf7\xcb\x66\xfb\xe6\xee\xfd\xc7\xc7\x62\x1c\x90\xfc\x58\xcb\x96\x35\x1a\x52\xb9\xbf\xa7\xcf\x7a\x2e\x95\x7f\xbe\xba\xb7\x69\x23\x9c\x2f\x23\x35\xde\x61\x6e\xfb\x80\x20\xff\x21\x15\xb0\x82\x08\x21\x20\xb7\xee\xdc\x50\x2d\x6b\xfe\x24\xdb\xbf\x4b\x17\x51\x40\x3d\x18\x38\xa0\xcc\x91\x79\x38\x3a\x9c\x5e\x3d\x7f\xff\xe1\xf1\x7b\x8a\x25\x04\x98\x69\xd6\x71\xd1\xb9\xdb\x55\xbd\xaf\x8b\x6d\x59\xf3\x47\xef\xc2\xb1\x58\xb3\xba\xd4\x28\xfc\xd0\x65\xff\xdd\x76\x22\xcb\xfa\xaa\xa8\xea\x10\xb6\x77\x31\x20\xe5\x66\xe7\x8e\x70\xaf\x3e\x5d\x1a\x07\xcd\x90\x0d\xa7\xbb\xa1\x2f\x01\x40\xf6\xca\xf0\xe8\x91\x26\xd7\x9e\x5f\xd2\x6c\x99\xa1\x1c\x78\xff\x62\x49\x5e\x50\x0f\xe9\x24\x1d\xed\xee\x7f\x7e\xd3\xac\x2a\xe3\x5a\x99\xf8\xa9\x0c\x9e\x2a\x53\x2a\x0f\x9d\xc6\x33\x23\x87\x18\x9e\xd0\x04\x55\x86\x40\xcb\xf6\xa0\x3d\x4e\x08\x0d\x86\x17\x4b\xcf\xcb\x7c\xab\xe8\xf3\x98\x4f\xe3\xa7\x60\x0b\xb4\xa4\xe0\x48\xf5\x40\xe9\x2d\x0a\x14\x71\x24\x65\x6c\x39\x12\x2b\xef\xab\x7b\x65\x52\xd1\xab\xc0\xca\xcd\x38\x9b\x4a\x59\x25\xbc\x4a\x39\x2a\x1c\xff\xf9\xd8\x19\x0c\x2b\x8b\xea\x4a\xc7\x65\xae\x8d\x3e\x1b\x0f\xa6\xfe\xac\x0b\x2b\x3d\xb3\x55\xc6\xeb\x12\x81\x71\xf6\xe7\xad\xcd\x95\xf4\xac\x65\xff\xce\x36\xe1\x2a\x72\x75\x3d\xae\x23\x93\x84\xff\xd6\x35\x28\xd3\xd9\x68\x64\xfe\x6a\xa0\xa8\xd1\x67\x01\x39\xab\x85\x86\xfa\x5d\xb1\x59\xfb\xd8\x98\x86\x38\x95\xde\x39\x7d\x0d\x00\x00\xff\xff\xae\x79\x50\xba\xb6\x08\x00\x00")

func templatesVmssTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVmssTf,
		"templates/vmss.tf",
	)
}

func templatesVmssTf() (*asset, error) {
	bytes, err := templatesVmssTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vmss.tf", size: 2230, mode: os.FileMode(480), modTime: time.Unix(1540977414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xcf\xea\x83\x30\x0c\xc7\xef\x82\xef\x10\x82\x67\x7f\x3f\x2f\xbb\xf9\x24\x63\x94\xa0\x61\xb8\x69\x23\xa9\x75\xb0\xe2\xbb\x8f\x96\x75\xb0\x2e\xb9\xe5\xfb\xe7\x13\x65\x27\x5e\x07\x06\xa4\xa7\x57\xd6\xc5\xec\x93\x6e\x9e\x66\x63\x79\x7b\x88\xde\x11\xf0\x36\xd9\x51\xfc\xaf\x10\xea\x0a\xc0\xd2\xc2\x50\x4c\x9f\x33\x18\x1d\x19\x61\xae\x2a\x7e\x35\x29\xd0\x03\x36\x21\x13\xbf\x0d\xed\x1b\x57\x5c\x63\xec\x48\x7d\x34\x8e\xca\xce\x19\xb7\xd2\xc0\x1f\xe2\x19\xbb\xff\x36\xed\x5f\x77\xc2\x4b\x34\xce\x32\xd0\x36\x89\x2d\x5e\x6b\xc2\x4e\xda\x66\x31\x76\x1e\x75\xf5\x0a\x00\x00\xff\xff\x4a\x1b\x38\x38\x08\x01\x00\x00")

func templatesVnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVnetTf,
		"templates/vnet.tf",
	)
}

func templatesVnetTf() (*asset, error) {
	bytes, err := templatesVnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vnet.tf", size: 264, mode: os.FileMode(480), modTime: time.Unix(1540954255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/credentials.tfvars": templatesCredentialsTfvars,
	"templates/db_mysql.tf": templatesDb_mysqlTf,
	"templates/devbox.tf": templatesDevboxTf,
	"templates/load_balancer.tf": templatesLoad_balancerTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/provider.tf": templatesProviderTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage_account.tf": templatesStorage_accountTf,
	"templates/subnet.tf": templatesSubnetTf,
	"templates/vars.tf": templatesVarsTf,
	"templates/vmss.tf": templatesVmssTf,
	"templates/vnet.tf": templatesVnetTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"credentials.tfvars": &bintree{templatesCredentialsTfvars, map[string]*bintree{}},
		"db_mysql.tf": &bintree{templatesDb_mysqlTf, map[string]*bintree{}},
		"devbox.tf": &bintree{templatesDevboxTf, map[string]*bintree{}},
		"load_balancer.tf": &bintree{templatesLoad_balancerTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"provider.tf": &bintree{templatesProviderTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage_account.tf": &bintree{templatesStorage_accountTf, map[string]*bintree{}},
		"subnet.tf": &bintree{templatesSubnetTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
		"vmss.tf": &bintree{templatesVmssTf, map[string]*bintree{}},
		"vnet.tf": &bintree{templatesVnetTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

